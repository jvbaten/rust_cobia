/* automatically generated by rust-bindgen 0.71.1 */

pub const COBIAERR_NoError: u32 = 0;
pub const COBIAERR_CAPEOPENError: u32 = 1;
pub const COBIAERR_UnknownError: u32 = 100;
pub const COBIAERR_CriticalError: u32 = 101;
pub const COBIAERR_OutOfMemory: u32 = 102;
pub const COBIAERR_NullPointer: u32 = 103;
pub const COBIAERR_InvalidArgument: u32 = 104;
pub const COBIAERR_NoSuchInterface: u32 = 105;
pub const COBIAERR_Denied: u32 = 106;
pub const COBIAERR_NoSuchItem: u32 = 107;
pub const COBIAERR_NotImplemented: u32 = 108;
pub const COBIAERR_NoService: u32 = 109;
pub const COBIAERR_UnexpectedNumberOfValues: u32 = 110;
pub const COBIAERR_UnexpectedDataType: u32 = 111;
pub const COBIAERR_PersistenceError: u32 = 112;
pub const COBIAERR_PersistenceSavedWithNewerVersion: u32 = 113;
pub const COBIAERR_DeniedBecauseOfElevation: u32 = 114;
pub const COBIAERR_InvalidOperation: u32 = 115;
pub const COBIAERR_InvalidTypeLibrary: u32 = 116;
pub const COBIAERR_InvalidConcurrentAccess: u32 = 117;
pub const COBIAERR_Registry_NotFound: u32 = 500;
pub const COBIAERR_Registry_AccessDenied: u32 = 501;
pub const COBIAERR_Registry_Corrupt: u32 = 502;
pub const COBIAERR_Registry_InvalidValueType: u32 = 503;
pub const COBIAERR_Registry_InvalidName: u32 = 504;
pub const COBIAERR_Registry_InvalidValue: u32 = 505;
pub const COBIAERR_Registry_CannotCreate: u32 = 506;
pub const COBIAERR_Registry_InsufficientData: u32 = 507;
pub const COBIAERR_Marshal_Error: u32 = 601;
pub const COBIAERR_Marshal_ConnectionClosed: u32 = 602;
pub const COBIAERR_Marshal_ConnectionTimedOut: u32 = 603;
pub type wchar_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
	pub Data1: ::std::os::raw::c_ulong,
	pub Data2: ::std::os::raw::c_ushort,
	pub Data3: ::std::os::raw::c_ushort,
	pub Data4: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _GUID"][::std::mem::size_of::<_GUID>() - 16usize];
	["Alignment of _GUID"][::std::mem::align_of::<_GUID>() - 4usize];
	["Offset of field: _GUID::Data1"][::std::mem::offset_of!(_GUID, Data1) - 0usize];
	["Offset of field: _GUID::Data2"][::std::mem::offset_of!(_GUID, Data2) - 4usize];
	["Offset of field: _GUID::Data3"][::std::mem::offset_of!(_GUID, Data3) - 6usize];
	["Offset of field: _GUID::Data4"][::std::mem::offset_of!(_GUID, Data4) - 8usize];
};
pub type GUID = _GUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
	pub unused: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of HWND__"][::std::mem::size_of::<HWND__>() - 4usize];
	["Alignment of HWND__"][::std::mem::align_of::<HWND__>() - 4usize];
	["Offset of field: HWND__::unused"][::std::mem::offset_of!(HWND__, unused) - 0usize];
};
pub type HWND = *mut HWND__;
pub type CapeWindowId = HWND;
pub type COBIACHAR = wchar_t;
pub type CapeResult = u32;
pub type CapeReal = f64;
pub type CapeInteger = i32;
pub type CapeEnumeration = i32;
pub type CapeCharacter = COBIACHAR;
pub type CapeBoolean = u32;
pub type CapeByte = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CapeUUID {
	pub data: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CapeUUID"][::std::mem::size_of::<_CapeUUID>() - 16usize];
	["Alignment of _CapeUUID"][::std::mem::align_of::<_CapeUUID>() - 1usize];
	["Offset of field: _CapeUUID::data"][::std::mem::offset_of!(_CapeUUID, data) - 0usize];
};
pub type CapeUUID = _CapeUUID;
unsafe extern "C" {
	pub fn CapeUUID_nullValue() -> CapeUUID;
}
unsafe extern "C" {
	pub fn capeUUID_Equal(uuid1: *const CapeUUID, uuid2: *const CapeUUID) -> bool;
}
unsafe extern "C" {
	pub fn capeUUID_isnull(uuid: *const CapeUUID) -> bool;
}
unsafe extern "C" {
	pub fn capeUUID_Compare(
		uuid1: *const CapeUUID,
		uuid2: *const CapeUUID,
	) -> i32;
}
unsafe extern "C" {
	pub fn capeUUID_parse(string: *const ::std::os::raw::c_char, uuid: *mut CapeUUID) -> bool;
}
unsafe extern "C" {
	pub fn capeUUID_format(uuid: *const CapeUUID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
	pub fn capeUUID_parsew(string: *const wchar_t, uuid: *mut CapeUUID) -> bool;
}
unsafe extern "C" {
	pub fn capeUUID_formatw(uuid: *const CapeUUID) -> *mut wchar_t;
}
unsafe extern "C" {
	pub fn capeUUID_swapOrder(tgt: *mut u8);
}
unsafe extern "C" {
	pub fn capeUUIDFromGUID(guid: *const GUID) -> CapeUUID;
}
unsafe extern "C" {
	pub fn GUIDFromCapeUUID(guid: *const CapeUUID) -> GUID;
}
pub const eCapeRegistryValueType_CapeRegValString: eCapeRegistryValueType = 0;
pub const eCapeRegistryValueType_CapeRegValInteger: eCapeRegistryValueType = 1;
pub const eCapeRegistryValueType_CapeRegValUUID: eCapeRegistryValueType = 2;
pub const eCapeRegistryValueType_CapeRegValEmpty: eCapeRegistryValueType = 3;
#[doc = "! Registry value type\n*!\nThe supported types of registry values.\n\\sa ICapeRegistryKey::getValueType()\n*/"]
pub type eCapeRegistryValueType = i32;
#[doc = "! Registry value type\n*!\nThe supported types of registry values.\n\\sa ICapeRegistryKey::getValueType()\n*/"]
pub use self::eCapeRegistryValueType as CapeRegistryValueType;
pub const eCapePMCServiceType_PMCService_Inproc32: eCapePMCServiceType = 0;
pub const eCapePMCServiceType_PMCService_Inproc64: eCapePMCServiceType = 1;
pub const eCapePMCServiceType_PMCService_COM32: eCapePMCServiceType = 2;
pub const eCapePMCServiceType_PMCService_COM64: eCapePMCServiceType = 3;
pub const eCapePMCServiceType_PMCService_Remote: eCapePMCServiceType = 4;
pub const eCapePMCServiceType_PMCService_Local: eCapePMCServiceType = 5;
pub const eCapePMCServiceType_PMCService_COUNT: eCapePMCServiceType = 6;
#[doc = "! Service provider types\n*!\nService type enumeration for PMC instantiation\n*/"]
pub type eCapePMCServiceType = i32;
#[doc = "! Service provider types\n*!\nService type enumeration for PMC instantiation\n*/"]
pub use self::eCapePMCServiceType as CapePMCServiceType;
#[doc = "!<Value contains string"]
pub const eCapeValueType_CapeValueTypeString: eCapeValueType = 0;
#[doc = "!<Value contains integer"]
pub const eCapeValueType_CapeValueTypeInteger: eCapeValueType = 1;
#[doc = "!<Value contains boolean"]
pub const eCapeValueType_CapeValueTypeBoolean: eCapeValueType = 2;
#[doc = "!<Value contains real (double precision)"]
pub const eCapeValueType_CapeValueTypeReal: eCapeValueType = 3;
#[doc = "!<No value"]
pub const eCapeValueType_CapeValueTypeEmpty: eCapeValueType = 4;
#[doc = "! CapeValue data types\n*!\nThe supported types of CapeValue values.\n*/"]
pub type eCapeValueType = i32;
#[doc = "! CapeValue data types\n*!\nThe supported types of CapeValue values.\n*/"]
pub use self::eCapeValueType as CapeValueType;
pub type CapeSize = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICobiaBase_VTable {
	pub addReference: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
	pub release: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICobiaBase_VTable"][::std::mem::size_of::<_ICobiaBase_VTable>() - 16usize];
	["Alignment of _ICobiaBase_VTable"][::std::mem::align_of::<_ICobiaBase_VTable>() - 8usize];
	["Offset of field: _ICobiaBase_VTable::addReference"]
		[::std::mem::offset_of!(_ICobiaBase_VTable, addReference) - 0usize];
	["Offset of field: _ICobiaBase_VTable::release"]
		[::std::mem::offset_of!(_ICobiaBase_VTable, release) - 8usize];
};
pub type ICobiaBase_VTable = _ICobiaBase_VTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaBase {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICobiaBase_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaBase"][::std::mem::size_of::<ICobiaBase>() - 16usize];
	["Alignment of ICobiaBase"][::std::mem::align_of::<ICobiaBase>() - 8usize];
	["Offset of field: ICobiaBase::me"][::std::mem::offset_of!(ICobiaBase, me) - 0usize];
	["Offset of field: ICobiaBase::vTbl"][::std::mem::offset_of!(ICobiaBase, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeInterface_VTable {
	pub addReference: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
	pub release: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
	pub queryInterface: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const CapeUUID,
			ptr: *mut *mut _ICapeInterface,
		) -> CapeResult,
	>,
	pub getLastError: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			ptr: *mut *mut _ICapeError,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeInterface_VTable"][::std::mem::size_of::<ICapeInterface_VTable>() - 32usize];
	["Alignment of ICapeInterface_VTable"]
		[::std::mem::align_of::<ICapeInterface_VTable>() - 8usize];
	["Offset of field: ICapeInterface_VTable::addReference"]
		[::std::mem::offset_of!(ICapeInterface_VTable, addReference) - 0usize];
	["Offset of field: ICapeInterface_VTable::release"]
		[::std::mem::offset_of!(ICapeInterface_VTable, release) - 8usize];
	["Offset of field: ICapeInterface_VTable::queryInterface"]
		[::std::mem::offset_of!(ICapeInterface_VTable, queryInterface) - 16usize];
	["Offset of field: ICapeInterface_VTable::getLastError"]
		[::std::mem::offset_of!(ICapeInterface_VTable, getLastError) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeInterface {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeInterface_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeInterface"][::std::mem::size_of::<_ICapeInterface>() - 16usize];
	["Alignment of _ICapeInterface"][::std::mem::align_of::<_ICapeInterface>() - 8usize];
	["Offset of field: _ICapeInterface::me"][::std::mem::offset_of!(_ICapeInterface, me) - 0usize];
	["Offset of field: _ICapeInterface::vTbl"]
		[::std::mem::offset_of!(_ICapeInterface, vTbl) - 8usize];
};
pub type ICapeInterface = _ICapeInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeError_VTable {
	pub base: ICobiaBase_VTable,
	pub getErrorText: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			errorText: *mut _ICapeString,
		) -> CapeResult,
	>,
	pub getCause: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			cause: *mut *mut _ICapeError,
		) -> CapeResult,
	>,
	pub getSource: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			componentDescription: *mut _ICapeString,
		) -> CapeResult,
	>,
	pub getScope: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			errorScope: *mut _ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeError_VTable"][::std::mem::size_of::<ICapeError_VTable>() - 48usize];
	["Alignment of ICapeError_VTable"][::std::mem::align_of::<ICapeError_VTable>() - 8usize];
	["Offset of field: ICapeError_VTable::base"]
		[::std::mem::offset_of!(ICapeError_VTable, base) - 0usize];
	["Offset of field: ICapeError_VTable::getErrorText"]
		[::std::mem::offset_of!(ICapeError_VTable, getErrorText) - 16usize];
	["Offset of field: ICapeError_VTable::getCause"]
		[::std::mem::offset_of!(ICapeError_VTable, getCause) - 24usize];
	["Offset of field: ICapeError_VTable::getSource"]
		[::std::mem::offset_of!(ICapeError_VTable, getSource) - 32usize];
	["Offset of field: ICapeError_VTable::getScope"]
		[::std::mem::offset_of!(ICapeError_VTable, getScope) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeError {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeError_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeError"][::std::mem::size_of::<_ICapeError>() - 16usize];
	["Alignment of _ICapeError"][::std::mem::align_of::<_ICapeError>() - 8usize];
	["Offset of field: _ICapeError::me"][::std::mem::offset_of!(_ICapeError, me) - 0usize];
	["Offset of field: _ICapeError::vTbl"][::std::mem::offset_of!(_ICapeError, vTbl) - 8usize];
};
pub type ICapeError = _ICapeError;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayReal_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *mut CapeReal,
			size: *mut CapeSize,
		),
	>,
	pub setsize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: CapeSize,
			data: *mut *mut CapeReal,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayReal_VTable"][::std::mem::size_of::<ICapeArrayReal_VTable>() - 16usize];
	["Alignment of ICapeArrayReal_VTable"]
		[::std::mem::align_of::<ICapeArrayReal_VTable>() - 8usize];
	["Offset of field: ICapeArrayReal_VTable::get"]
		[::std::mem::offset_of!(ICapeArrayReal_VTable, get) - 0usize];
	["Offset of field: ICapeArrayReal_VTable::setsize"]
		[::std::mem::offset_of!(ICapeArrayReal_VTable, setsize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayReal {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeArrayReal_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayReal"][::std::mem::size_of::<ICapeArrayReal>() - 16usize];
	["Alignment of ICapeArrayReal"][::std::mem::align_of::<ICapeArrayReal>() - 8usize];
	["Offset of field: ICapeArrayReal::me"][::std::mem::offset_of!(ICapeArrayReal, me) - 0usize];
	["Offset of field: ICapeArrayReal::vTbl"]
		[::std::mem::offset_of!(ICapeArrayReal, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayInteger_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *mut CapeInteger,
			size: *mut CapeSize,
		),
	>,
	pub setsize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: CapeSize,
			data: *mut *mut CapeInteger,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayInteger_VTable"]
		[::std::mem::size_of::<ICapeArrayInteger_VTable>() - 16usize];
	["Alignment of ICapeArrayInteger_VTable"]
		[::std::mem::align_of::<ICapeArrayInteger_VTable>() - 8usize];
	["Offset of field: ICapeArrayInteger_VTable::get"]
		[::std::mem::offset_of!(ICapeArrayInteger_VTable, get) - 0usize];
	["Offset of field: ICapeArrayInteger_VTable::setsize"]
		[::std::mem::offset_of!(ICapeArrayInteger_VTable, setsize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayInteger {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeArrayInteger_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayInteger"][::std::mem::size_of::<ICapeArrayInteger>() - 16usize];
	["Alignment of ICapeArrayInteger"][::std::mem::align_of::<ICapeArrayInteger>() - 8usize];
	["Offset of field: ICapeArrayInteger::me"]
		[::std::mem::offset_of!(ICapeArrayInteger, me) - 0usize];
	["Offset of field: ICapeArrayInteger::vTbl"]
		[::std::mem::offset_of!(ICapeArrayInteger, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayByte_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *mut CapeByte,
			size: *mut CapeSize,
		),
	>,
	pub setsize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: CapeSize,
			data: *mut *mut CapeByte,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayByte_VTable"][::std::mem::size_of::<ICapeArrayByte_VTable>() - 16usize];
	["Alignment of ICapeArrayByte_VTable"]
		[::std::mem::align_of::<ICapeArrayByte_VTable>() - 8usize];
	["Offset of field: ICapeArrayByte_VTable::get"]
		[::std::mem::offset_of!(ICapeArrayByte_VTable, get) - 0usize];
	["Offset of field: ICapeArrayByte_VTable::setsize"]
		[::std::mem::offset_of!(ICapeArrayByte_VTable, setsize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayByte {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeArrayByte_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayByte"][::std::mem::size_of::<ICapeArrayByte>() - 16usize];
	["Alignment of ICapeArrayByte"][::std::mem::align_of::<ICapeArrayByte>() - 8usize];
	["Offset of field: ICapeArrayByte::me"][::std::mem::offset_of!(ICapeArrayByte, me) - 0usize];
	["Offset of field: ICapeArrayByte::vTbl"]
		[::std::mem::offset_of!(ICapeArrayByte, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayBoolean_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *mut CapeBoolean,
			size: *mut CapeSize,
		),
	>,
	pub setsize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: CapeSize,
			data: *mut *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayBoolean_VTable"]
		[::std::mem::size_of::<ICapeArrayBoolean_VTable>() - 16usize];
	["Alignment of ICapeArrayBoolean_VTable"]
		[::std::mem::align_of::<ICapeArrayBoolean_VTable>() - 8usize];
	["Offset of field: ICapeArrayBoolean_VTable::get"]
		[::std::mem::offset_of!(ICapeArrayBoolean_VTable, get) - 0usize];
	["Offset of field: ICapeArrayBoolean_VTable::setsize"]
		[::std::mem::offset_of!(ICapeArrayBoolean_VTable, setsize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayBoolean {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeArrayBoolean_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayBoolean"][::std::mem::size_of::<ICapeArrayBoolean>() - 16usize];
	["Alignment of ICapeArrayBoolean"][::std::mem::align_of::<ICapeArrayBoolean>() - 8usize];
	["Offset of field: ICapeArrayBoolean::me"]
		[::std::mem::offset_of!(ICapeArrayBoolean, me) - 0usize];
	["Offset of field: ICapeArrayBoolean::vTbl"]
		[::std::mem::offset_of!(ICapeArrayBoolean, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayEnumeration_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *mut CapeEnumeration,
			size: *mut CapeSize,
		),
	>,
	pub setsize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: CapeSize,
			data: *mut *mut CapeEnumeration,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayEnumeration_VTable"]
		[::std::mem::size_of::<ICapeArrayEnumeration_VTable>() - 16usize];
	["Alignment of ICapeArrayEnumeration_VTable"]
		[::std::mem::align_of::<ICapeArrayEnumeration_VTable>() - 8usize];
	["Offset of field: ICapeArrayEnumeration_VTable::get"]
		[::std::mem::offset_of!(ICapeArrayEnumeration_VTable, get) - 0usize];
	["Offset of field: ICapeArrayEnumeration_VTable::setsize"]
		[::std::mem::offset_of!(ICapeArrayEnumeration_VTable, setsize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayEnumeration {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeArrayEnumeration_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayEnumeration"][::std::mem::size_of::<ICapeArrayEnumeration>() - 16usize];
	["Alignment of ICapeArrayEnumeration"]
		[::std::mem::align_of::<ICapeArrayEnumeration>() - 8usize];
	["Offset of field: ICapeArrayEnumeration::me"]
		[::std::mem::offset_of!(ICapeArrayEnumeration, me) - 0usize];
	["Offset of field: ICapeArrayEnumeration::vTbl"]
		[::std::mem::offset_of!(ICapeArrayEnumeration, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeString_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *const CapeCharacter,
			size: *mut CapeSize,
		),
	>,
	pub set: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *const CapeCharacter,
			size: CapeSize,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeString_VTable"][::std::mem::size_of::<ICapeString_VTable>() - 16usize];
	["Alignment of ICapeString_VTable"][::std::mem::align_of::<ICapeString_VTable>() - 8usize];
	["Offset of field: ICapeString_VTable::get"]
		[::std::mem::offset_of!(ICapeString_VTable, get) - 0usize];
	["Offset of field: ICapeString_VTable::set"]
		[::std::mem::offset_of!(ICapeString_VTable, set) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeString {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeString_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeString"][::std::mem::size_of::<_ICapeString>() - 16usize];
	["Alignment of _ICapeString"][::std::mem::align_of::<_ICapeString>() - 8usize];
	["Offset of field: _ICapeString::me"][::std::mem::offset_of!(_ICapeString, me) - 0usize];
	["Offset of field: _ICapeString::vTbl"][::std::mem::offset_of!(_ICapeString, vTbl) - 8usize];
};
pub type ICapeString = _ICapeString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayString_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *mut *mut ICapeString,
			size: *mut CapeSize,
		),
	>,
	pub setsize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: CapeSize,
			data: *mut *mut *mut ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayString_VTable"][::std::mem::size_of::<ICapeArrayString_VTable>() - 16usize];
	["Alignment of ICapeArrayString_VTable"]
		[::std::mem::align_of::<ICapeArrayString_VTable>() - 8usize];
	["Offset of field: ICapeArrayString_VTable::get"]
		[::std::mem::offset_of!(ICapeArrayString_VTable, get) - 0usize];
	["Offset of field: ICapeArrayString_VTable::setsize"]
		[::std::mem::offset_of!(ICapeArrayString_VTable, setsize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayString {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeArrayString_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayString"][::std::mem::size_of::<ICapeArrayString>() - 16usize];
	["Alignment of ICapeArrayString"][::std::mem::align_of::<ICapeArrayString>() - 8usize];
	["Offset of field: ICapeArrayString::me"]
		[::std::mem::offset_of!(ICapeArrayString, me) - 0usize];
	["Offset of field: ICapeArrayString::vTbl"]
		[::std::mem::offset_of!(ICapeArrayString, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeValue_VTable {
	pub getValueType: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeValueType,
	>,
	pub getStringValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *const CapeCharacter,
			size: *mut CapeSize,
		) -> CapeResult,
	>,
	pub getIntegerValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getBooleanValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub getRealValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: *mut CapeReal) -> CapeResult,
	>,
	pub setStringValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *const CapeCharacter,
			size: CapeSize,
		) -> CapeResult,
	>,
	pub setIntegerValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: CapeInteger) -> CapeResult,
	>,
	pub setBooleanValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: CapeBoolean) -> CapeResult,
	>,
	pub setRealValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: CapeReal) -> CapeResult,
	>,
	pub clear:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeValue_VTable"][::std::mem::size_of::<ICapeValue_VTable>() - 80usize];
	["Alignment of ICapeValue_VTable"][::std::mem::align_of::<ICapeValue_VTable>() - 8usize];
	["Offset of field: ICapeValue_VTable::getValueType"]
		[::std::mem::offset_of!(ICapeValue_VTable, getValueType) - 0usize];
	["Offset of field: ICapeValue_VTable::getStringValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, getStringValue) - 8usize];
	["Offset of field: ICapeValue_VTable::getIntegerValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, getIntegerValue) - 16usize];
	["Offset of field: ICapeValue_VTable::getBooleanValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, getBooleanValue) - 24usize];
	["Offset of field: ICapeValue_VTable::getRealValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, getRealValue) - 32usize];
	["Offset of field: ICapeValue_VTable::setStringValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, setStringValue) - 40usize];
	["Offset of field: ICapeValue_VTable::setIntegerValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, setIntegerValue) - 48usize];
	["Offset of field: ICapeValue_VTable::setBooleanValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, setBooleanValue) - 56usize];
	["Offset of field: ICapeValue_VTable::setRealValue"]
		[::std::mem::offset_of!(ICapeValue_VTable, setRealValue) - 64usize];
	["Offset of field: ICapeValue_VTable::clear"]
		[::std::mem::offset_of!(ICapeValue_VTable, clear) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeValue {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeValue_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeValue"][::std::mem::size_of::<ICapeValue>() - 16usize];
	["Alignment of ICapeValue"][::std::mem::align_of::<ICapeValue>() - 8usize];
	["Offset of field: ICapeValue::me"][::std::mem::offset_of!(ICapeValue, me) - 0usize];
	["Offset of field: ICapeValue::vTbl"][::std::mem::offset_of!(ICapeValue, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayValue_VTable {
	pub get: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			data: *mut *mut *mut ICapeValue,
			size: *mut CapeSize,
		),
	>,
	pub setsize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: CapeSize,
			data: *mut *mut *mut ICapeValue,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayValue_VTable"][::std::mem::size_of::<ICapeArrayValue_VTable>() - 16usize];
	["Alignment of ICapeArrayValue_VTable"]
		[::std::mem::align_of::<ICapeArrayValue_VTable>() - 8usize];
	["Offset of field: ICapeArrayValue_VTable::get"]
		[::std::mem::offset_of!(ICapeArrayValue_VTable, get) - 0usize];
	["Offset of field: ICapeArrayValue_VTable::setsize"]
		[::std::mem::offset_of!(ICapeArrayValue_VTable, setsize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeArrayValue {
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeArrayValue_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeArrayValue"][::std::mem::size_of::<ICapeArrayValue>() - 16usize];
	["Alignment of ICapeArrayValue"][::std::mem::align_of::<ICapeArrayValue>() - 8usize];
	["Offset of field: ICapeArrayValue::me"][::std::mem::offset_of!(ICapeArrayValue, me) - 0usize];
	["Offset of field: ICapeArrayValue::vTbl"]
		[::std::mem::offset_of!(ICapeArrayValue, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaCollection_VTable {
	pub base: ICapeInterface_VTable,
	pub ItemByIndex: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			item: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub ItemByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			item: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub getCount: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			itemCount: *mut CapeInteger,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaCollection_VTable"][::std::mem::size_of::<ICobiaCollection_VTable>() - 56usize];
	["Alignment of ICobiaCollection_VTable"]
		[::std::mem::align_of::<ICobiaCollection_VTable>() - 8usize];
	["Offset of field: ICobiaCollection_VTable::base"]
		[::std::mem::offset_of!(ICobiaCollection_VTable, base) - 0usize];
	["Offset of field: ICobiaCollection_VTable::ItemByIndex"]
		[::std::mem::offset_of!(ICobiaCollection_VTable, ItemByIndex) - 32usize];
	["Offset of field: ICobiaCollection_VTable::ItemByName"]
		[::std::mem::offset_of!(ICobiaCollection_VTable, ItemByName) - 40usize];
	["Offset of field: ICobiaCollection_VTable::getCount"]
		[::std::mem::offset_of!(ICobiaCollection_VTable, getCount) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaCollection {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICobiaCollection_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaCollection"][::std::mem::size_of::<ICobiaCollection>() - 16usize];
	["Alignment of ICobiaCollection"][::std::mem::align_of::<ICobiaCollection>() - 8usize];
	["Offset of field: ICobiaCollection::me"]
		[::std::mem::offset_of!(ICobiaCollection, me) - 0usize];
	["Offset of field: ICobiaCollection::vTbl"]
		[::std::mem::offset_of!(ICobiaCollection, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaIdentification_VTable {
	pub base: ICapeInterface_VTable,
	pub getComponentName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString) -> CapeResult,
	>,
	pub putComponentName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString) -> CapeResult,
	>,
	pub getComponentDescription: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, desc: *mut ICapeString) -> CapeResult,
	>,
	pub putComponentDescription: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, desc: *mut ICapeString) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaIdentification_VTable"]
		[::std::mem::size_of::<ICobiaIdentification_VTable>() - 64usize];
	["Alignment of ICobiaIdentification_VTable"]
		[::std::mem::align_of::<ICobiaIdentification_VTable>() - 8usize];
	["Offset of field: ICobiaIdentification_VTable::base"]
		[::std::mem::offset_of!(ICobiaIdentification_VTable, base) - 0usize];
	["Offset of field: ICobiaIdentification_VTable::getComponentName"]
		[::std::mem::offset_of!(ICobiaIdentification_VTable, getComponentName) - 32usize];
	["Offset of field: ICobiaIdentification_VTable::putComponentName"]
		[::std::mem::offset_of!(ICobiaIdentification_VTable, putComponentName) - 40usize];
	["Offset of field: ICobiaIdentification_VTable::getComponentDescription"]
		[::std::mem::offset_of!(ICobiaIdentification_VTable, getComponentDescription) - 48usize];
	["Offset of field: ICobiaIdentification_VTable::putComponentDescription"]
		[::std::mem::offset_of!(ICobiaIdentification_VTable, putComponentDescription) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaIdentification {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICobiaIdentification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaIdentification"][::std::mem::size_of::<ICobiaIdentification>() - 16usize];
	["Alignment of ICobiaIdentification"][::std::mem::align_of::<ICobiaIdentification>() - 8usize];
	["Offset of field: ICobiaIdentification::me"]
		[::std::mem::offset_of!(ICobiaIdentification, me) - 0usize];
	["Offset of field: ICobiaIdentification::vTbl"]
		[::std::mem::offset_of!(ICobiaIdentification, vTbl) - 8usize];
};
unsafe extern "C" {
	pub static ICapeInterface_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static ICapeError_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static ICobiaCollection_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static ICobiaIdentification_UUID: CapeUUID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayReal_VTable {
	#[doc = "!< ICapeArrayReal vTable"]
	pub base: ICapeArrayReal_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayReal_VTable"][::std::mem::size_of::<ICobiaArrayReal_VTable>() - 24usize];
	["Alignment of ICobiaArrayReal_VTable"]
		[::std::mem::align_of::<ICobiaArrayReal_VTable>() - 8usize];
	["Offset of field: ICobiaArrayReal_VTable::base"]
		[::std::mem::offset_of!(ICobiaArrayReal_VTable, base) - 0usize];
	["Offset of field: ICobiaArrayReal_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaArrayReal_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayReal {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaArrayReal_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayReal"][::std::mem::size_of::<ICobiaArrayReal>() - 16usize];
	["Alignment of ICobiaArrayReal"][::std::mem::align_of::<ICobiaArrayReal>() - 8usize];
	["Offset of field: ICobiaArrayReal::me"][::std::mem::offset_of!(ICobiaArrayReal, me) - 0usize];
	["Offset of field: ICobiaArrayReal::vTbl"]
		[::std::mem::offset_of!(ICobiaArrayReal, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayInteger_VTable {
	#[doc = "!< ICapeArrayInteger class"]
	pub base: ICapeArrayInteger_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayInteger_VTable"]
		[::std::mem::size_of::<ICobiaArrayInteger_VTable>() - 24usize];
	["Alignment of ICobiaArrayInteger_VTable"]
		[::std::mem::align_of::<ICobiaArrayInteger_VTable>() - 8usize];
	["Offset of field: ICobiaArrayInteger_VTable::base"]
		[::std::mem::offset_of!(ICobiaArrayInteger_VTable, base) - 0usize];
	["Offset of field: ICobiaArrayInteger_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaArrayInteger_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayInteger {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaArrayInteger_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayInteger"][::std::mem::size_of::<ICobiaArrayInteger>() - 16usize];
	["Alignment of ICobiaArrayInteger"][::std::mem::align_of::<ICobiaArrayInteger>() - 8usize];
	["Offset of field: ICobiaArrayInteger::me"]
		[::std::mem::offset_of!(ICobiaArrayInteger, me) - 0usize];
	["Offset of field: ICobiaArrayInteger::vTbl"]
		[::std::mem::offset_of!(ICobiaArrayInteger, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayByte_VTable {
	#[doc = "!< ICapeArrayByte class"]
	pub base: ICapeArrayByte_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayByte_VTable"][::std::mem::size_of::<ICobiaArrayByte_VTable>() - 24usize];
	["Alignment of ICobiaArrayByte_VTable"]
		[::std::mem::align_of::<ICobiaArrayByte_VTable>() - 8usize];
	["Offset of field: ICobiaArrayByte_VTable::base"]
		[::std::mem::offset_of!(ICobiaArrayByte_VTable, base) - 0usize];
	["Offset of field: ICobiaArrayByte_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaArrayByte_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayByte {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaArrayByte_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayByte"][::std::mem::size_of::<ICobiaArrayByte>() - 16usize];
	["Alignment of ICobiaArrayByte"][::std::mem::align_of::<ICobiaArrayByte>() - 8usize];
	["Offset of field: ICobiaArrayByte::me"][::std::mem::offset_of!(ICobiaArrayByte, me) - 0usize];
	["Offset of field: ICobiaArrayByte::vTbl"]
		[::std::mem::offset_of!(ICobiaArrayByte, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayBoolean_VTable {
	#[doc = "!< ICapeArrayBoolean class"]
	pub base: ICapeArrayBoolean_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayBoolean_VTable"]
		[::std::mem::size_of::<ICobiaArrayBoolean_VTable>() - 24usize];
	["Alignment of ICobiaArrayBoolean_VTable"]
		[::std::mem::align_of::<ICobiaArrayBoolean_VTable>() - 8usize];
	["Offset of field: ICobiaArrayBoolean_VTable::base"]
		[::std::mem::offset_of!(ICobiaArrayBoolean_VTable, base) - 0usize];
	["Offset of field: ICobiaArrayBoolean_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaArrayBoolean_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayBoolean {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaArrayBoolean_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayBoolean"][::std::mem::size_of::<ICobiaArrayBoolean>() - 16usize];
	["Alignment of ICobiaArrayBoolean"][::std::mem::align_of::<ICobiaArrayBoolean>() - 8usize];
	["Offset of field: ICobiaArrayBoolean::me"]
		[::std::mem::offset_of!(ICobiaArrayBoolean, me) - 0usize];
	["Offset of field: ICobiaArrayBoolean::vTbl"]
		[::std::mem::offset_of!(ICobiaArrayBoolean, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayEnumeration_VTable {
	#[doc = "!<ICapeArrayEnumeration class"]
	pub base: ICapeArrayEnumeration_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayEnumeration_VTable"]
		[::std::mem::size_of::<ICobiaArrayEnumeration_VTable>() - 24usize];
	["Alignment of ICobiaArrayEnumeration_VTable"]
		[::std::mem::align_of::<ICobiaArrayEnumeration_VTable>() - 8usize];
	["Offset of field: ICobiaArrayEnumeration_VTable::base"]
		[::std::mem::offset_of!(ICobiaArrayEnumeration_VTable, base) - 0usize];
	["Offset of field: ICobiaArrayEnumeration_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaArrayEnumeration_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayEnumeration {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaArrayEnumeration_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayEnumeration"][::std::mem::size_of::<ICobiaArrayEnumeration>() - 16usize];
	["Alignment of ICobiaArrayEnumeration"]
		[::std::mem::align_of::<ICobiaArrayEnumeration>() - 8usize];
	["Offset of field: ICobiaArrayEnumeration::me"]
		[::std::mem::offset_of!(ICobiaArrayEnumeration, me) - 0usize];
	["Offset of field: ICobiaArrayEnumeration::vTbl"]
		[::std::mem::offset_of!(ICobiaArrayEnumeration, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaString_VTable {
	#[doc = "!< ICapeString class"]
	pub base: ICapeString_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaString_VTable"][::std::mem::size_of::<ICobiaString_VTable>() - 24usize];
	["Alignment of ICobiaString_VTable"][::std::mem::align_of::<ICobiaString_VTable>() - 8usize];
	["Offset of field: ICobiaString_VTable::base"]
		[::std::mem::offset_of!(ICobiaString_VTable, base) - 0usize];
	["Offset of field: ICobiaString_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaString_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaString {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaString_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaString"][::std::mem::size_of::<ICobiaString>() - 16usize];
	["Alignment of ICobiaString"][::std::mem::align_of::<ICobiaString>() - 8usize];
	["Offset of field: ICobiaString::me"][::std::mem::offset_of!(ICobiaString, me) - 0usize];
	["Offset of field: ICobiaString::vTbl"][::std::mem::offset_of!(ICobiaString, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayString_VTable {
	pub base: ICapeArrayString_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayString_VTable"]
		[::std::mem::size_of::<ICobiaArrayString_VTable>() - 24usize];
	["Alignment of ICobiaArrayString_VTable"]
		[::std::mem::align_of::<ICobiaArrayString_VTable>() - 8usize];
	["Offset of field: ICobiaArrayString_VTable::base"]
		[::std::mem::offset_of!(ICobiaArrayString_VTable, base) - 0usize];
	["Offset of field: ICobiaArrayString_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaArrayString_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayString {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaArrayString_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayString"][::std::mem::size_of::<ICobiaArrayString>() - 16usize];
	["Alignment of ICobiaArrayString"][::std::mem::align_of::<ICobiaArrayString>() - 8usize];
	["Offset of field: ICobiaArrayString::me"]
		[::std::mem::offset_of!(ICobiaArrayString, me) - 0usize];
	["Offset of field: ICobiaArrayString::vTbl"]
		[::std::mem::offset_of!(ICobiaArrayString, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaValue_VTable {
	pub base: ICapeValue_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaValue_VTable"][::std::mem::size_of::<ICobiaValue_VTable>() - 88usize];
	["Alignment of ICobiaValue_VTable"][::std::mem::align_of::<ICobiaValue_VTable>() - 8usize];
	["Offset of field: ICobiaValue_VTable::base"]
		[::std::mem::offset_of!(ICobiaValue_VTable, base) - 0usize];
	["Offset of field: ICobiaValue_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaValue_VTable, destroy) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaValue {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaValue_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaValue"][::std::mem::size_of::<ICobiaValue>() - 16usize];
	["Alignment of ICobiaValue"][::std::mem::align_of::<ICobiaValue>() - 8usize];
	["Offset of field: ICobiaValue::me"][::std::mem::offset_of!(ICobiaValue, me) - 0usize];
	["Offset of field: ICobiaValue::vTbl"][::std::mem::offset_of!(ICobiaValue, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayValue_VTable {
	#[doc = "!<ICapeArrayValue class"]
	pub base: ICapeArrayValue_VTable,
	pub destroy: ::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayValue_VTable"][::std::mem::size_of::<ICobiaArrayValue_VTable>() - 24usize];
	["Alignment of ICobiaArrayValue_VTable"]
		[::std::mem::align_of::<ICobiaArrayValue_VTable>() - 8usize];
	["Offset of field: ICobiaArrayValue_VTable::base"]
		[::std::mem::offset_of!(ICobiaArrayValue_VTable, base) - 0usize];
	["Offset of field: ICobiaArrayValue_VTable::destroy"]
		[::std::mem::offset_of!(ICobiaArrayValue_VTable, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaArrayValue {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICobiaArrayValue_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaArrayValue"][::std::mem::size_of::<ICobiaArrayValue>() - 16usize];
	["Alignment of ICobiaArrayValue"][::std::mem::align_of::<ICobiaArrayValue>() - 8usize];
	["Offset of field: ICobiaArrayValue::me"]
		[::std::mem::offset_of!(ICobiaArrayValue, me) - 0usize];
	["Offset of field: ICobiaArrayValue::vTbl"]
		[::std::mem::offset_of!(ICobiaArrayValue, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICobiaDataClassFactory {
	pub createCobiaString: ::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaString>,
	pub createCobiaValue: ::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaValue>,
	pub createCobiaArrayReal: ::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaArrayReal>,
	pub createCobiaArrayInteger:
		::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaArrayInteger>,
	pub createCobiaArrayByte: ::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaArrayByte>,
	pub createCobiaArrayBoolean:
		::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaArrayBoolean>,
	pub createCobiaArrayEnumeration:
		::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaArrayEnumeration>,
	pub createCobiaArrayString:
		::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaArrayString>,
	pub createCobiaArrayValue:
		::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaArrayValue>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICobiaDataClassFactory"][::std::mem::size_of::<ICobiaDataClassFactory>() - 72usize];
	["Alignment of ICobiaDataClassFactory"]
		[::std::mem::align_of::<ICobiaDataClassFactory>() - 8usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaString"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaString) - 0usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaValue"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaValue) - 8usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaArrayReal"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaArrayReal) - 16usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaArrayInteger"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaArrayInteger) - 24usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaArrayByte"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaArrayByte) - 32usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaArrayBoolean"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaArrayBoolean) - 40usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaArrayEnumeration"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaArrayEnumeration) - 48usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaArrayString"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaArrayString) - 56usize];
	["Offset of field: ICobiaDataClassFactory::createCobiaArrayValue"]
		[::std::mem::offset_of!(ICobiaDataClassFactory, createCobiaArrayValue) - 64usize];
};
pub const eCapePMCRegistrationFlags_CapePMCRegistrationFlag_None: eCapePMCRegistrationFlags = 0;
pub const eCapePMCRegistrationFlags_CapePMCRegistrationFlag_RestrictedThreading:
	eCapePMCRegistrationFlags = 1;
#[doc = "! PMC registration flags\n*!\nBit flags for PMC registration\n*/"]
pub type eCapePMCRegistrationFlags = i32;
#[doc = "! PMC registration flags\n*!\nBit flags for PMC registration\n*/"]
pub use self::eCapePMCRegistrationFlags as CapePMCRegistrationFlags;
pub const eCapePMCCreationFlags_CapePMCCreationFlag_Default: eCapePMCCreationFlags = 0;
pub const eCapePMCCreationFlags_CapePMCCreationFlag_AllowRestrictedThreading:
	eCapePMCCreationFlags = 1;
#[doc = "! PMC creation flags\n*!\nBit flags for PMC creation\n*/"]
pub type eCapePMCCreationFlags = i32;
#[doc = "! PMC creation flags\n*!\nBit flags for PMC creation\n*/"]
pub use self::eCapePMCCreationFlags as CapePMCCreationFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeRegistryKey_VTable {
	pub base: ICobiaBase_VTable,
	pub getValues: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getValueType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			subKey: *const CapeCharacter,
			regValType: *mut CapeRegistryValueType,
		) -> CapeResult,
	>,
	pub getStringValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			subKey: *const CapeCharacter,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getIntegerValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			subKey: *const CapeCharacter,
			value: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getUUIDValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			subKey: *const CapeCharacter,
			value: *mut CapeUUID,
		) -> CapeResult,
	>,
	pub getKeys: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getSubKey: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
			key: *mut *mut _ICapeRegistryKey,
		) -> CapeResult,
	>,
	pub isAllUsers: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			allUsers: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeRegistryKey_VTable"][::std::mem::size_of::<ICapeRegistryKey_VTable>() - 80usize];
	["Alignment of ICapeRegistryKey_VTable"]
		[::std::mem::align_of::<ICapeRegistryKey_VTable>() - 8usize];
	["Offset of field: ICapeRegistryKey_VTable::base"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, base) - 0usize];
	["Offset of field: ICapeRegistryKey_VTable::getValues"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, getValues) - 16usize];
	["Offset of field: ICapeRegistryKey_VTable::getValueType"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, getValueType) - 24usize];
	["Offset of field: ICapeRegistryKey_VTable::getStringValue"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, getStringValue) - 32usize];
	["Offset of field: ICapeRegistryKey_VTable::getIntegerValue"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, getIntegerValue) - 40usize];
	["Offset of field: ICapeRegistryKey_VTable::getUUIDValue"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, getUUIDValue) - 48usize];
	["Offset of field: ICapeRegistryKey_VTable::getKeys"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, getKeys) - 56usize];
	["Offset of field: ICapeRegistryKey_VTable::getSubKey"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, getSubKey) - 64usize];
	["Offset of field: ICapeRegistryKey_VTable::isAllUsers"]
		[::std::mem::offset_of!(ICapeRegistryKey_VTable, isAllUsers) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeRegistryKey {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeRegistryKey_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeRegistryKey"][::std::mem::size_of::<_ICapeRegistryKey>() - 16usize];
	["Alignment of _ICapeRegistryKey"][::std::mem::align_of::<_ICapeRegistryKey>() - 8usize];
	["Offset of field: _ICapeRegistryKey::me"]
		[::std::mem::offset_of!(_ICapeRegistryKey, me) - 0usize];
	["Offset of field: _ICapeRegistryKey::vTbl"]
		[::std::mem::offset_of!(_ICapeRegistryKey, vTbl) - 8usize];
};
pub type ICapeRegistryKey = _ICapeRegistryKey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeRegistryKeyWriter_VTable {
	pub base: ICapeRegistryKey_VTable,
	pub createSubKey: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
			key: *mut *mut _ICapeRegistryKeyWriter,
		) -> CapeResult,
	>,
	pub deleteSubKey: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub deleteValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
			valueName: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putStringValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			value: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putIntegerValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			value: CapeInteger,
		) -> CapeResult,
	>,
	pub putUUIDValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
			value: *const CapeUUID,
		) -> CapeResult,
	>,
	pub putEmptyValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *const CapeCharacter,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeRegistryKeyWriter_VTable"]
		[::std::mem::size_of::<ICapeRegistryKeyWriter_VTable>() - 136usize];
	["Alignment of ICapeRegistryKeyWriter_VTable"]
		[::std::mem::align_of::<ICapeRegistryKeyWriter_VTable>() - 8usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::base"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, base) - 0usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::createSubKey"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, createSubKey) - 80usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::deleteSubKey"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, deleteSubKey) - 88usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::deleteValue"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, deleteValue) - 96usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::putStringValue"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, putStringValue) - 104usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::putIntegerValue"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, putIntegerValue) - 112usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::putUUIDValue"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, putUUIDValue) - 120usize];
	["Offset of field: ICapeRegistryKeyWriter_VTable::putEmptyValue"]
		[::std::mem::offset_of!(ICapeRegistryKeyWriter_VTable, putEmptyValue) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeRegistryKeyWriter {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeRegistryKeyWriter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeRegistryKeyWriter"][::std::mem::size_of::<_ICapeRegistryKeyWriter>() - 16usize];
	["Alignment of _ICapeRegistryKeyWriter"]
		[::std::mem::align_of::<_ICapeRegistryKeyWriter>() - 8usize];
	["Offset of field: _ICapeRegistryKeyWriter::me"]
		[::std::mem::offset_of!(_ICapeRegistryKeyWriter, me) - 0usize];
	["Offset of field: _ICapeRegistryKeyWriter::vTbl"]
		[::std::mem::offset_of!(_ICapeRegistryKeyWriter, vTbl) - 8usize];
};
pub type ICapeRegistryKeyWriter = _ICapeRegistryKeyWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapePMCRegistrar_VTable {
	pub base: ICobiaBase_VTable,
	pub putName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putDescription: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			description: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putCapeVersion: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			capeVersion: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putComponentVersion: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			componentVersion: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putVendorURL: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			vendorURL: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putHelpURL: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			helpURL: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putAbout: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			about: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub putUUID: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uuid: *const CapeUUID) -> CapeResult,
	>,
	pub putProgId: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			progId: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub addCatID: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, catID: *const CapeUUID) -> CapeResult,
	>,
	pub putFlags: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			flags: CapePMCRegistrationFlags,
		) -> CapeResult,
	>,
	pub addLocation: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			serviceType: CapePMCServiceType,
			location: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub commit:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub putVersionIndependentProgId: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			versionIndependentProgId: *const CapeCharacter,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapePMCRegistrar_VTable"]
		[::std::mem::size_of::<ICapePMCRegistrar_VTable>() - 128usize];
	["Alignment of ICapePMCRegistrar_VTable"]
		[::std::mem::align_of::<ICapePMCRegistrar_VTable>() - 8usize];
	["Offset of field: ICapePMCRegistrar_VTable::base"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, base) - 0usize];
	["Offset of field: ICapePMCRegistrar_VTable::putName"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putName) - 16usize];
	["Offset of field: ICapePMCRegistrar_VTable::putDescription"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putDescription) - 24usize];
	["Offset of field: ICapePMCRegistrar_VTable::putCapeVersion"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putCapeVersion) - 32usize];
	["Offset of field: ICapePMCRegistrar_VTable::putComponentVersion"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putComponentVersion) - 40usize];
	["Offset of field: ICapePMCRegistrar_VTable::putVendorURL"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putVendorURL) - 48usize];
	["Offset of field: ICapePMCRegistrar_VTable::putHelpURL"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putHelpURL) - 56usize];
	["Offset of field: ICapePMCRegistrar_VTable::putAbout"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putAbout) - 64usize];
	["Offset of field: ICapePMCRegistrar_VTable::putUUID"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putUUID) - 72usize];
	["Offset of field: ICapePMCRegistrar_VTable::putProgId"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putProgId) - 80usize];
	["Offset of field: ICapePMCRegistrar_VTable::addCatID"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, addCatID) - 88usize];
	["Offset of field: ICapePMCRegistrar_VTable::putFlags"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putFlags) - 96usize];
	["Offset of field: ICapePMCRegistrar_VTable::addLocation"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, addLocation) - 104usize];
	["Offset of field: ICapePMCRegistrar_VTable::commit"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, commit) - 112usize];
	["Offset of field: ICapePMCRegistrar_VTable::putVersionIndependentProgId"]
		[::std::mem::offset_of!(ICapePMCRegistrar_VTable, putVersionIndependentProgId) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapePMCRegistrar {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapePMCRegistrar_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapePMCRegistrar"][::std::mem::size_of::<ICapePMCRegistrar>() - 16usize];
	["Alignment of ICapePMCRegistrar"][::std::mem::align_of::<ICapePMCRegistrar>() - 8usize];
	["Offset of field: ICapePMCRegistrar::me"]
		[::std::mem::offset_of!(ICapePMCRegistrar, me) - 0usize];
	["Offset of field: ICapePMCRegistrar::vTbl"]
		[::std::mem::offset_of!(ICapePMCRegistrar, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeRegistryWriter_VTable {
	pub base: ICobiaBase_VTable,
	pub createKey: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
			key: *mut *mut ICapeRegistryKeyWriter,
		) -> CapeResult,
	>,
	pub getKey: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
			key: *mut *mut ICapeRegistryKey,
		) -> CapeResult,
	>,
	pub deleteKey: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub deleteValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			keyName: *const CapeCharacter,
			valueName: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub getPMCRegistrar: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			registrar: *mut *mut ICapePMCRegistrar,
		) -> CapeResult,
	>,
	pub unregisterPMC: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uuid: *const CapeUUID) -> CapeResult,
	>,
	pub unregisterPMCService: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const CapeUUID,
			service: CapePMCServiceType,
		) -> CapeResult,
	>,
	pub revert:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub commit:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub registerTypesFromIDL: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			idlFiles: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub unregisterTypes: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			libraryID: *const CapeUUID,
		) -> CapeResult,
	>,
	pub registerProxyInterfaceProvider: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			libraryID: *const CapeUUID,
			serviceType: CapePMCServiceType,
			location: *const CapeCharacter,
		) -> CapeResult,
	>,
	pub unregisterProxyInterfaceProvider: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			libraryID: *const CapeUUID,
			serviceType: CapePMCServiceType,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeRegistryWriter_VTable"]
		[::std::mem::size_of::<ICapeRegistryWriter_VTable>() - 120usize];
	["Alignment of ICapeRegistryWriter_VTable"]
		[::std::mem::align_of::<ICapeRegistryWriter_VTable>() - 8usize];
	["Offset of field: ICapeRegistryWriter_VTable::base"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, base) - 0usize];
	["Offset of field: ICapeRegistryWriter_VTable::createKey"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, createKey) - 16usize];
	["Offset of field: ICapeRegistryWriter_VTable::getKey"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, getKey) - 24usize];
	["Offset of field: ICapeRegistryWriter_VTable::deleteKey"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, deleteKey) - 32usize];
	["Offset of field: ICapeRegistryWriter_VTable::deleteValue"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, deleteValue) - 40usize];
	["Offset of field: ICapeRegistryWriter_VTable::getPMCRegistrar"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, getPMCRegistrar) - 48usize];
	["Offset of field: ICapeRegistryWriter_VTable::unregisterPMC"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, unregisterPMC) - 56usize];
	["Offset of field: ICapeRegistryWriter_VTable::unregisterPMCService"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, unregisterPMCService) - 64usize];
	["Offset of field: ICapeRegistryWriter_VTable::revert"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, revert) - 72usize];
	["Offset of field: ICapeRegistryWriter_VTable::commit"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, commit) - 80usize];
	["Offset of field: ICapeRegistryWriter_VTable::registerTypesFromIDL"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, registerTypesFromIDL) - 88usize];
	["Offset of field: ICapeRegistryWriter_VTable::unregisterTypes"]
		[::std::mem::offset_of!(ICapeRegistryWriter_VTable, unregisterTypes) - 96usize];
	["Offset of field: ICapeRegistryWriter_VTable::registerProxyInterfaceProvider"][::std::mem::offset_of!(
		ICapeRegistryWriter_VTable,
		registerProxyInterfaceProvider
	) - 104usize];
	["Offset of field: ICapeRegistryWriter_VTable::unregisterProxyInterfaceProvider"][::std::mem::offset_of!(
		ICapeRegistryWriter_VTable,
		unregisterProxyInterfaceProvider
	) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeRegistryWriter {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeRegistryWriter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeRegistryWriter"][::std::mem::size_of::<ICapeRegistryWriter>() - 16usize];
	["Alignment of ICapeRegistryWriter"][::std::mem::align_of::<ICapeRegistryWriter>() - 8usize];
	["Offset of field: ICapeRegistryWriter::me"]
		[::std::mem::offset_of!(ICapeRegistryWriter, me) - 0usize];
	["Offset of field: ICapeRegistryWriter::vTbl"]
		[::std::mem::offset_of!(ICapeRegistryWriter, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapePMCRegistrationDetails_VTable {
	pub base: ICapeInterface_VTable,
	pub getName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString) -> CapeResult,
	>,
	pub getDescription: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			description: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getCapeVersion: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			capeVersion: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getComponentVersion: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			componentVersion: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getVendorURL: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			vendorURL: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getHelpURL: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			helpURL: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getAbout: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			about: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getUUID: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uuid: *mut CapeUUID) -> CapeResult,
	>,
	pub getProgId: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			progId: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getCatIDs: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			catIDs: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub implementsCatID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			catID: *const CapeUUID,
			result: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub getServiceTypes: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			serviceTypes: *mut ICapeArrayEnumeration,
		) -> CapeResult,
	>,
	pub getLocation: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			serviceType: CapePMCServiceType,
			location: *mut ICapeString,
		) -> CapeResult,
	>,
	pub registeredForAllUsers: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			serviceType: CapePMCServiceType,
			forAllUsers: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub getFlags: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			flags: *mut CapePMCRegistrationFlags,
		) -> CapeResult,
	>,
	pub createInstance: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			flags: CapePMCCreationFlags,
			instance: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub getVersionIndependentProgId: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			versionIndependentProgId: *mut ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapePMCRegistrationDetails_VTable"]
		[::std::mem::size_of::<ICapePMCRegistrationDetails_VTable>() - 168usize];
	["Alignment of ICapePMCRegistrationDetails_VTable"]
		[::std::mem::align_of::<ICapePMCRegistrationDetails_VTable>() - 8usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::base"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, base) - 0usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getName"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getName) - 32usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getDescription"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getDescription) - 40usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getCapeVersion"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getCapeVersion) - 48usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getComponentVersion"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getComponentVersion) - 56usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getVendorURL"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getVendorURL) - 64usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getHelpURL"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getHelpURL) - 72usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getAbout"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getAbout) - 80usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getUUID"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getUUID) - 88usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getProgId"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getProgId) - 96usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getCatIDs"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getCatIDs) - 104usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::implementsCatID"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, implementsCatID) - 112usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getServiceTypes"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getServiceTypes) - 120usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getLocation"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getLocation) - 128usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::registeredForAllUsers"][::std::mem::offset_of!(
		ICapePMCRegistrationDetails_VTable,
		registeredForAllUsers
	) - 136usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getFlags"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, getFlags) - 144usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::createInstance"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails_VTable, createInstance) - 152usize];
	["Offset of field: ICapePMCRegistrationDetails_VTable::getVersionIndependentProgId"][::std::mem::offset_of!(
		ICapePMCRegistrationDetails_VTable,
		getVersionIndependentProgId
	)
		- 160usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapePMCRegistrationDetails {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapePMCRegistrationDetails_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapePMCRegistrationDetails"]
		[::std::mem::size_of::<ICapePMCRegistrationDetails>() - 16usize];
	["Alignment of ICapePMCRegistrationDetails"]
		[::std::mem::align_of::<ICapePMCRegistrationDetails>() - 8usize];
	["Offset of field: ICapePMCRegistrationDetails::me"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails, me) - 0usize];
	["Offset of field: ICapePMCRegistrationDetails::vTbl"]
		[::std::mem::offset_of!(ICapePMCRegistrationDetails, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapePMCEnumerator_VTable {
	pub base: ICobiaBase_VTable,
	pub getPMCbyUUID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const CapeUUID,
			PMCdetails: *mut *mut ICapePMCRegistrationDetails,
		) -> CapeResult,
	>,
	pub getPMCbyProgId: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			progId: *const CapeCharacter,
			PMCdetails: *mut *mut ICapePMCRegistrationDetails,
		) -> CapeResult,
	>,
	pub getPMCsByCategory: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			catIDs: *const CapeUUID,
			nCatID: CapeSize,
			PMCs: *mut *mut ICobiaCollection,
		) -> CapeResult,
	>,
	pub getAllPMCs: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			PMCs: *mut *mut ICobiaCollection,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapePMCEnumerator_VTable"]
		[::std::mem::size_of::<ICapePMCEnumerator_VTable>() - 48usize];
	["Alignment of ICapePMCEnumerator_VTable"]
		[::std::mem::align_of::<ICapePMCEnumerator_VTable>() - 8usize];
	["Offset of field: ICapePMCEnumerator_VTable::base"]
		[::std::mem::offset_of!(ICapePMCEnumerator_VTable, base) - 0usize];
	["Offset of field: ICapePMCEnumerator_VTable::getPMCbyUUID"]
		[::std::mem::offset_of!(ICapePMCEnumerator_VTable, getPMCbyUUID) - 16usize];
	["Offset of field: ICapePMCEnumerator_VTable::getPMCbyProgId"]
		[::std::mem::offset_of!(ICapePMCEnumerator_VTable, getPMCbyProgId) - 24usize];
	["Offset of field: ICapePMCEnumerator_VTable::getPMCsByCategory"]
		[::std::mem::offset_of!(ICapePMCEnumerator_VTable, getPMCsByCategory) - 32usize];
	["Offset of field: ICapePMCEnumerator_VTable::getAllPMCs"]
		[::std::mem::offset_of!(ICapePMCEnumerator_VTable, getAllPMCs) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapePMCEnumerator {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapePMCEnumerator_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapePMCEnumerator"][::std::mem::size_of::<ICapePMCEnumerator>() - 16usize];
	["Alignment of ICapePMCEnumerator"][::std::mem::align_of::<ICapePMCEnumerator>() - 8usize];
	["Offset of field: ICapePMCEnumerator::me"]
		[::std::mem::offset_of!(ICapePMCEnumerator, me) - 0usize];
	["Offset of field: ICapePMCEnumerator::vTbl"]
		[::std::mem::offset_of!(ICapePMCEnumerator, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeLibraryDetails_VTable {
	pub base: ICapeInterface_VTable,
	pub getName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString) -> CapeResult,
	>,
	pub getUUID: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uuid: *mut CapeUUID) -> CapeResult,
	>,
	pub getLibraryVersion: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			libraryVersion: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getLibraryPath: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, path: *mut ICapeString) -> CapeResult,
	>,
	pub getProxyInterfaceProviderLocation: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			service: CapePMCServiceType,
			loc: *mut ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeLibraryDetails_VTable"]
		[::std::mem::size_of::<ICapeLibraryDetails_VTable>() - 72usize];
	["Alignment of ICapeLibraryDetails_VTable"]
		[::std::mem::align_of::<ICapeLibraryDetails_VTable>() - 8usize];
	["Offset of field: ICapeLibraryDetails_VTable::base"]
		[::std::mem::offset_of!(ICapeLibraryDetails_VTable, base) - 0usize];
	["Offset of field: ICapeLibraryDetails_VTable::getName"]
		[::std::mem::offset_of!(ICapeLibraryDetails_VTable, getName) - 32usize];
	["Offset of field: ICapeLibraryDetails_VTable::getUUID"]
		[::std::mem::offset_of!(ICapeLibraryDetails_VTable, getUUID) - 40usize];
	["Offset of field: ICapeLibraryDetails_VTable::getLibraryVersion"]
		[::std::mem::offset_of!(ICapeLibraryDetails_VTable, getLibraryVersion) - 48usize];
	["Offset of field: ICapeLibraryDetails_VTable::getLibraryPath"]
		[::std::mem::offset_of!(ICapeLibraryDetails_VTable, getLibraryPath) - 56usize];
	["Offset of field: ICapeLibraryDetails_VTable::getProxyInterfaceProviderLocation"][::std::mem::offset_of!(
		ICapeLibraryDetails_VTable,
		getProxyInterfaceProviderLocation
	) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeLibraryDetails {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeLibraryDetails_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeLibraryDetails"][::std::mem::size_of::<ICapeLibraryDetails>() - 16usize];
	["Alignment of ICapeLibraryDetails"][::std::mem::align_of::<ICapeLibraryDetails>() - 8usize];
	["Offset of field: ICapeLibraryDetails::me"]
		[::std::mem::offset_of!(ICapeLibraryDetails, me) - 0usize];
	["Offset of field: ICapeLibraryDetails::vTbl"]
		[::std::mem::offset_of!(ICapeLibraryDetails, vTbl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeLibraryEnumerator_VTable {
	pub base: ICobiaBase_VTable,
	pub getLibraryByUUID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const CapeUUID,
			libraryDetails: *mut *mut ICapeLibraryDetails,
		) -> CapeResult,
	>,
	pub getLibraryByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			libName: *const CapeCharacter,
			libraryDetails: *mut *mut ICapeLibraryDetails,
		) -> CapeResult,
	>,
	pub getAllLibraries: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			libraries: *mut *mut ICobiaCollection,
		) -> CapeResult,
	>,
	pub getLibraryByInterfaceUUID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const CapeUUID,
			libraryDetails: *mut *mut ICapeLibraryDetails,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeLibraryEnumerator_VTable"]
		[::std::mem::size_of::<ICapeLibraryEnumerator_VTable>() - 48usize];
	["Alignment of ICapeLibraryEnumerator_VTable"]
		[::std::mem::align_of::<ICapeLibraryEnumerator_VTable>() - 8usize];
	["Offset of field: ICapeLibraryEnumerator_VTable::base"]
		[::std::mem::offset_of!(ICapeLibraryEnumerator_VTable, base) - 0usize];
	["Offset of field: ICapeLibraryEnumerator_VTable::getLibraryByUUID"]
		[::std::mem::offset_of!(ICapeLibraryEnumerator_VTable, getLibraryByUUID) - 16usize];
	["Offset of field: ICapeLibraryEnumerator_VTable::getLibraryByName"]
		[::std::mem::offset_of!(ICapeLibraryEnumerator_VTable, getLibraryByName) - 24usize];
	["Offset of field: ICapeLibraryEnumerator_VTable::getAllLibraries"]
		[::std::mem::offset_of!(ICapeLibraryEnumerator_VTable, getAllLibraries) - 32usize];
	["Offset of field: ICapeLibraryEnumerator_VTable::getLibraryByInterfaceUUID"][::std::mem::offset_of!(
		ICapeLibraryEnumerator_VTable,
		getLibraryByInterfaceUUID
	) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeLibraryEnumerator {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeLibraryEnumerator_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeLibraryEnumerator"][::std::mem::size_of::<ICapeLibraryEnumerator>() - 16usize];
	["Alignment of ICapeLibraryEnumerator"]
		[::std::mem::align_of::<ICapeLibraryEnumerator>() - 8usize];
	["Offset of field: ICapeLibraryEnumerator::me"]
		[::std::mem::offset_of!(ICapeLibraryEnumerator, me) - 0usize];
	["Offset of field: ICapeLibraryEnumerator::vTbl"]
		[::std::mem::offset_of!(ICapeLibraryEnumerator, vTbl) - 8usize];
};
unsafe extern "C" {
	pub static ICapePMCRegistrationDetails_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static ICapeLibraryDetails_UUID: CapeUUID;
}
pub type CAPESTRINGFUNC =
	::std::option::Option<unsafe extern "C" fn(arg1: *mut ICapeString) -> CapeResult>;
pub type CAPEUUIDFUNCVOID = ::std::option::Option<unsafe extern "C" fn() -> CapeUUID>;
pub type CAPESTRINGFUNCCAPERESULT = ::std::option::Option<
	unsafe extern "C" fn(errorCode: CapeResult, arg1: *mut ICapeString) -> CapeResult,
>;
pub type CAPESTRINGFUNCUUID = ::std::option::Option<
	unsafe extern "C" fn(errorCode: *const CapeUUID, arg1: *mut ICapeString) -> CapeResult,
>;
pub type CAPEGETREGISTRYKEY = ::std::option::Option<
	unsafe extern "C" fn(
		keyName: *const CapeCharacter,
		key: *mut *mut ICapeRegistryKey,
	) -> CapeResult,
>;
pub type CAPEGETREGISTRYWRITER = ::std::option::Option<
	unsafe extern "C" fn(allUsers: bool, writer: *mut *mut ICapeRegistryWriter) -> CapeResult,
>;
pub type CAPEGETPMCENUMERATOR = ::std::option::Option<
	unsafe extern "C" fn(pmcEnumerator: *mut *mut ICapePMCEnumerator) -> CapeResult,
>;
pub type CAPEGETLIBRARYENUMERATOR = ::std::option::Option<
	unsafe extern "C" fn(libraryEnumerator: *mut *mut ICapeLibraryEnumerator) -> CapeResult,
>;
pub type CAPEUUIDFROMSTRING = ::std::option::Option<
	unsafe extern "C" fn(str_: *const COBIACHAR, uuid: *mut CapeUUID) -> CapeResult,
>;
pub type COBIACREATEPMCINSTANCE = ::std::option::Option<
	unsafe extern "C" fn(
		uuid: *const CapeUUID,
		flags: CapePMCCreationFlags,
		instance: *mut *mut ICapeInterface,
	) -> CapeResult,
>;
pub type COBIAGETDATACLASSFACTORY =
	::std::option::Option<unsafe extern "C" fn() -> *mut ICobiaDataClassFactory>;
pub type COBIADEPERSISTFROMTRANSITIONFORMAT = ::std::option::Option<
	unsafe extern "C" fn(
		reader: *mut ICapeInterface,
		transitionFormat: *mut *mut ICapeInterface,
		majorVersion: CapeInteger,
		minorVersion: CapeInteger,
	) -> CapeBoolean,
>;
pub type COBIADEPERSISTPMCFROMTRANSITIONFORMAT = ::std::option::Option<
	unsafe extern "C" fn(
		PMC: *mut ICapeInterface,
		reader: *mut ICapeInterface,
		majorVersion: CapeInteger,
		minorVersion: CapeInteger,
	) -> CapeResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COBIAFUNCTIONS {
	#[doc = "!< pointer to UUID generation function"]
	pub capeGenUUID: CAPEUUIDFUNCVOID,
	#[doc = "!< pointer to UUID to string conversion function"]
	pub capeStringFromUUID: CAPESTRINGFUNCUUID,
	#[doc = "!< pointer to string to UUID conversion function"]
	pub capeUUIDFromString: CAPEUUIDFROMSTRING,
	#[doc = "!< pointer to COBIA machine-wide data folder function"]
	pub getCobiaDataFolder: CAPESTRINGFUNC,
	#[doc = "!< pointer to COBIA user data folder function"]
	pub getCobiaUserDataFolder: CAPESTRINGFUNC,
	#[doc = "!< pointer to COBIA machine-wide binary folder function"]
	pub getCobiaFolder: CAPESTRINGFUNC,
	#[doc = "!< pointer to COBIA language string function"]
	pub getCobiaLanguage: CAPESTRINGFUNC,
	#[doc = "!< pointer to COBIA version string function"]
	pub getCobiaVersion: CAPESTRINGFUNC,
	#[doc = "!< pointer to COBIA error description function"]
	pub capeGetErrorDescription: CAPESTRINGFUNCCAPERESULT,
	#[doc = "!< pointer to COBIA function to get registry key"]
	pub capeGetRegistryKey: CAPEGETREGISTRYKEY,
	#[doc = "!< pointer to COBIA function to get PMC enumerator"]
	pub capeGetPMCEnumerator: CAPEGETPMCENUMERATOR,
	#[doc = "!< pointer to COBIA function to get PMC enumerator"]
	pub capeGetLibraryEnumerator: CAPEGETLIBRARYENUMERATOR,
	#[doc = "!< pointer to COBIA function to get registry write access"]
	pub capeGetRegistryWriter: CAPEGETREGISTRYWRITER,
	#[doc = "!< pointer to COBIA function to create PMC instance"]
	pub cobiaCreatePMCInstance: COBIACREATEPMCINSTANCE,
	#[doc = "!< pointer to COBIA functions to create data class instances"]
	pub cobiaDataClassFactories: *mut ICobiaDataClassFactory,
	#[doc = "!< pointer to COBIA API function to enable persistence transition"]
	pub cobiaDepersistFromTransitionFormat: COBIADEPERSISTFROMTRANSITIONFORMAT,
	#[doc = "!< pointer to COBIA API function to enable persistence transition"]
	pub cobiaDepersistPMCFromTransitionFormat: COBIADEPERSISTPMCFROMTRANSITIONFORMAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _COBIAFUNCTIONS"][::std::mem::size_of::<_COBIAFUNCTIONS>() - 136usize];
	["Alignment of _COBIAFUNCTIONS"][::std::mem::align_of::<_COBIAFUNCTIONS>() - 8usize];
	["Offset of field: _COBIAFUNCTIONS::capeGenUUID"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeGenUUID) - 0usize];
	["Offset of field: _COBIAFUNCTIONS::capeStringFromUUID"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeStringFromUUID) - 8usize];
	["Offset of field: _COBIAFUNCTIONS::capeUUIDFromString"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeUUIDFromString) - 16usize];
	["Offset of field: _COBIAFUNCTIONS::getCobiaDataFolder"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, getCobiaDataFolder) - 24usize];
	["Offset of field: _COBIAFUNCTIONS::getCobiaUserDataFolder"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, getCobiaUserDataFolder) - 32usize];
	["Offset of field: _COBIAFUNCTIONS::getCobiaFolder"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, getCobiaFolder) - 40usize];
	["Offset of field: _COBIAFUNCTIONS::getCobiaLanguage"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, getCobiaLanguage) - 48usize];
	["Offset of field: _COBIAFUNCTIONS::getCobiaVersion"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, getCobiaVersion) - 56usize];
	["Offset of field: _COBIAFUNCTIONS::capeGetErrorDescription"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeGetErrorDescription) - 64usize];
	["Offset of field: _COBIAFUNCTIONS::capeGetRegistryKey"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeGetRegistryKey) - 72usize];
	["Offset of field: _COBIAFUNCTIONS::capeGetPMCEnumerator"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeGetPMCEnumerator) - 80usize];
	["Offset of field: _COBIAFUNCTIONS::capeGetLibraryEnumerator"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeGetLibraryEnumerator) - 88usize];
	["Offset of field: _COBIAFUNCTIONS::capeGetRegistryWriter"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, capeGetRegistryWriter) - 96usize];
	["Offset of field: _COBIAFUNCTIONS::cobiaCreatePMCInstance"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, cobiaCreatePMCInstance) - 104usize];
	["Offset of field: _COBIAFUNCTIONS::cobiaDataClassFactories"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, cobiaDataClassFactories) - 112usize];
	["Offset of field: _COBIAFUNCTIONS::cobiaDepersistFromTransitionFormat"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, cobiaDepersistFromTransitionFormat) - 120usize];
	["Offset of field: _COBIAFUNCTIONS::cobiaDepersistPMCFromTransitionFormat"]
		[::std::mem::offset_of!(_COBIAFUNCTIONS, cobiaDepersistPMCFromTransitionFormat) - 128usize];
};
pub type COBIAFUNCTIONS = _COBIAFUNCTIONS;
unsafe extern "C" {
	pub fn cobia_getCobiaFunctions() -> *mut COBIAFUNCTIONS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLAttributeCollection_VTable {
	pub AttributeCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub AttributeName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			name: *mut ICapeString,
		) -> CapeResult,
	>,
	pub AttributeValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub AttributeValueByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			attribute: *mut ICapeString,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub HasAttribute: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			attribute: *mut ICapeString,
		) -> CapeBoolean,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLAttributeCollection_VTable"]
		[::std::mem::size_of::<ICapeIDLAttributeCollection_VTable>() - 40usize];
	["Alignment of ICapeIDLAttributeCollection_VTable"]
		[::std::mem::align_of::<ICapeIDLAttributeCollection_VTable>() - 8usize];
	["Offset of field: ICapeIDLAttributeCollection_VTable::AttributeCount"]
		[::std::mem::offset_of!(ICapeIDLAttributeCollection_VTable, AttributeCount) - 0usize];
	["Offset of field: ICapeIDLAttributeCollection_VTable::AttributeName"]
		[::std::mem::offset_of!(ICapeIDLAttributeCollection_VTable, AttributeName) - 8usize];
	["Offset of field: ICapeIDLAttributeCollection_VTable::AttributeValue"]
		[::std::mem::offset_of!(ICapeIDLAttributeCollection_VTable, AttributeValue) - 16usize];
	["Offset of field: ICapeIDLAttributeCollection_VTable::AttributeValueByName"][::std::mem::offset_of!(
		ICapeIDLAttributeCollection_VTable,
		AttributeValueByName
	) - 24usize];
	["Offset of field: ICapeIDLAttributeCollection_VTable::HasAttribute"]
		[::std::mem::offset_of!(ICapeIDLAttributeCollection_VTable, HasAttribute) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLAttributeCollection {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLAttributeCollection_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLAttributeCollection"]
		[::std::mem::size_of::<_ICapeIDLAttributeCollection>() - 16usize];
	["Alignment of _ICapeIDLAttributeCollection"]
		[::std::mem::align_of::<_ICapeIDLAttributeCollection>() - 8usize];
	["Offset of field: _ICapeIDLAttributeCollection::me"]
		[::std::mem::offset_of!(_ICapeIDLAttributeCollection, me) - 0usize];
	["Offset of field: _ICapeIDLAttributeCollection::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLAttributeCollection, vTbl) - 8usize];
};
pub type ICapeIDLAttributeCollection = _ICapeIDLAttributeCollection;
#[doc = "!<Not a valid data type"]
pub const eCapeIDLDataType_IDLDataType_CapeInvalidType: eCapeIDLDataType = 0;
#[doc = "!<CAPERESULT value"]
pub const eCapeIDLDataType_IDLDataType_CapeResult: eCapeIDLDataType = 1;
#[doc = "!<CapeString value"]
pub const eCapeIDLDataType_IDLDataType_CapeString: eCapeIDLDataType = 2;
#[doc = "!<CapeInteger value"]
pub const eCapeIDLDataType_IDLDataType_CapeInteger: eCapeIDLDataType = 3;
#[doc = "!<CapeBoolean value"]
pub const eCapeIDLDataType_IDLDataType_CapeBoolean: eCapeIDLDataType = 4;
#[doc = "!<CapeReal value"]
pub const eCapeIDLDataType_IDLDataType_CapeReal: eCapeIDLDataType = 5;
#[doc = "!<CapeInterface value; requires uuid (nullptr uuid identifies CapeObject type)"]
pub const eCapeIDLDataType_IDLDataType_CapeInterface: eCapeIDLDataType = 6;
#[doc = "!<CapeArrayString value"]
pub const eCapeIDLDataType_IDLDataType_CapeArrayString: eCapeIDLDataType = 7;
#[doc = "!<CapeValue value"]
pub const eCapeIDLDataType_IDLDataType_CapeValue: eCapeIDLDataType = 8;
#[doc = "!<CapeArrayInteger value"]
pub const eCapeIDLDataType_IDLDataType_CapeArrayInteger: eCapeIDLDataType = 9;
#[doc = "!<CapeArrayBoolean value"]
pub const eCapeIDLDataType_IDLDataType_CapeArrayBoolean: eCapeIDLDataType = 10;
#[doc = "!<CapeArrayReal value"]
pub const eCapeIDLDataType_IDLDataType_CapeArrayReal: eCapeIDLDataType = 11;
#[doc = "!<CapeArrayEnumeration value, requires template argument"]
pub const eCapeIDLDataType_IDLDataType_CapeArrayEnumeration: eCapeIDLDataType = 12;
#[doc = "!<CapeEnumeration value, requires uuid (or is generic enumeration in case of null uuid)"]
pub const eCapeIDLDataType_IDLDataType_CapeEnumeration: eCapeIDLDataType = 13;
#[doc = "!<CapeArrayValue value"]
pub const eCapeIDLDataType_IDLDataType_CapeArrayValue: eCapeIDLDataType = 14;
#[doc = "!<CapeArrayByte value"]
pub const eCapeIDLDataType_IDLDataType_CapeArrayByte: eCapeIDLDataType = 15;
#[doc = "!<UUID value"]
pub const eCapeIDLDataType_IDLDataType_CapeUUID: eCapeIDLDataType = 16;
#[doc = "!<Parent window ID in ICapeUtilities::Edit"]
pub const eCapeIDLDataType_IDLDataType_CapeWindowId: eCapeIDLDataType = 17;
#[doc = "!<Argument to a template value, requires template index"]
pub const eCapeIDLDataType_IDLDataType_CapeTemplateArgument: eCapeIDLDataType = 18;
pub type eCapeIDLDataType = i32;
pub use self::eCapeIDLDataType as CapeIDLDataType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLCategoryID_VTable {
	pub attribs: ICapeIDLAttributeCollection_VTable,
	pub Name: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub Uuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub LibraryUuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub LibraryName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLCategoryID_VTable"]
		[::std::mem::size_of::<ICapeIDLCategoryID_VTable>() - 72usize];
	["Alignment of ICapeIDLCategoryID_VTable"]
		[::std::mem::align_of::<ICapeIDLCategoryID_VTable>() - 8usize];
	["Offset of field: ICapeIDLCategoryID_VTable::attribs"]
		[::std::mem::offset_of!(ICapeIDLCategoryID_VTable, attribs) - 0usize];
	["Offset of field: ICapeIDLCategoryID_VTable::Name"]
		[::std::mem::offset_of!(ICapeIDLCategoryID_VTable, Name) - 40usize];
	["Offset of field: ICapeIDLCategoryID_VTable::Uuid"]
		[::std::mem::offset_of!(ICapeIDLCategoryID_VTable, Uuid) - 48usize];
	["Offset of field: ICapeIDLCategoryID_VTable::LibraryUuid"]
		[::std::mem::offset_of!(ICapeIDLCategoryID_VTable, LibraryUuid) - 56usize];
	["Offset of field: ICapeIDLCategoryID_VTable::LibraryName"]
		[::std::mem::offset_of!(ICapeIDLCategoryID_VTable, LibraryName) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLCategoryID {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLCategoryID_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLCategoryID"][::std::mem::size_of::<_ICapeIDLCategoryID>() - 16usize];
	["Alignment of _ICapeIDLCategoryID"][::std::mem::align_of::<_ICapeIDLCategoryID>() - 8usize];
	["Offset of field: _ICapeIDLCategoryID::me"]
		[::std::mem::offset_of!(_ICapeIDLCategoryID, me) - 0usize];
	["Offset of field: _ICapeIDLCategoryID::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLCategoryID, vTbl) - 8usize];
};
pub type ICapeIDLCategoryID = _ICapeIDLCategoryID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLCategoryIDCollection_VTable {
	pub CategoryIDCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub CategoryID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			catID: *mut *mut ICapeIDLCategoryID,
		) -> CapeResult,
	>,
	pub CategoryIDByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			catName: *mut ICapeString,
			catID: *mut *mut ICapeIDLCategoryID,
		) -> CapeResult,
	>,
	pub CategoryIDByUUID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const u8,
			catID: *mut *mut ICapeIDLCategoryID,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLCategoryIDCollection_VTable"]
		[::std::mem::size_of::<ICapeIDLCategoryIDCollection_VTable>() - 32usize];
	["Alignment of ICapeIDLCategoryIDCollection_VTable"]
		[::std::mem::align_of::<ICapeIDLCategoryIDCollection_VTable>() - 8usize];
	["Offset of field: ICapeIDLCategoryIDCollection_VTable::CategoryIDCount"]
		[::std::mem::offset_of!(ICapeIDLCategoryIDCollection_VTable, CategoryIDCount) - 0usize];
	["Offset of field: ICapeIDLCategoryIDCollection_VTable::CategoryID"]
		[::std::mem::offset_of!(ICapeIDLCategoryIDCollection_VTable, CategoryID) - 8usize];
	["Offset of field: ICapeIDLCategoryIDCollection_VTable::CategoryIDByName"]
		[::std::mem::offset_of!(ICapeIDLCategoryIDCollection_VTable, CategoryIDByName) - 16usize];
	["Offset of field: ICapeIDLCategoryIDCollection_VTable::CategoryIDByUUID"]
		[::std::mem::offset_of!(ICapeIDLCategoryIDCollection_VTable, CategoryIDByUUID) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLCategoryIDCollection {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLCategoryIDCollection_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLCategoryIDCollection"]
		[::std::mem::size_of::<_ICapeIDLCategoryIDCollection>() - 16usize];
	["Alignment of _ICapeIDLCategoryIDCollection"]
		[::std::mem::align_of::<_ICapeIDLCategoryIDCollection>() - 8usize];
	["Offset of field: _ICapeIDLCategoryIDCollection::me"]
		[::std::mem::offset_of!(_ICapeIDLCategoryIDCollection, me) - 0usize];
	["Offset of field: _ICapeIDLCategoryIDCollection::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLCategoryIDCollection, vTbl) - 8usize];
};
pub type ICapeIDLCategoryIDCollection = _ICapeIDLCategoryIDCollection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLEnumeration_VTable {
	pub attribs: ICapeIDLAttributeCollection_VTable,
	pub Name: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub Uuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub LibraryUuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub LibraryName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub Count:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub ItemName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			name: *mut ICapeString,
		) -> CapeResult,
	>,
	pub ItemValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			value: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub ItemValueByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub HasValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
		) -> CapeBoolean,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLEnumeration_VTable"]
		[::std::mem::size_of::<ICapeIDLEnumeration_VTable>() - 112usize];
	["Alignment of ICapeIDLEnumeration_VTable"]
		[::std::mem::align_of::<ICapeIDLEnumeration_VTable>() - 8usize];
	["Offset of field: ICapeIDLEnumeration_VTable::attribs"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, attribs) - 0usize];
	["Offset of field: ICapeIDLEnumeration_VTable::Name"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, Name) - 40usize];
	["Offset of field: ICapeIDLEnumeration_VTable::Uuid"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, Uuid) - 48usize];
	["Offset of field: ICapeIDLEnumeration_VTable::LibraryUuid"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, LibraryUuid) - 56usize];
	["Offset of field: ICapeIDLEnumeration_VTable::LibraryName"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, LibraryName) - 64usize];
	["Offset of field: ICapeIDLEnumeration_VTable::Count"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, Count) - 72usize];
	["Offset of field: ICapeIDLEnumeration_VTable::ItemName"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, ItemName) - 80usize];
	["Offset of field: ICapeIDLEnumeration_VTable::ItemValue"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, ItemValue) - 88usize];
	["Offset of field: ICapeIDLEnumeration_VTable::ItemValueByName"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, ItemValueByName) - 96usize];
	["Offset of field: ICapeIDLEnumeration_VTable::HasValue"]
		[::std::mem::offset_of!(ICapeIDLEnumeration_VTable, HasValue) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLEnumeration {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLEnumeration_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLEnumeration"][::std::mem::size_of::<_ICapeIDLEnumeration>() - 16usize];
	["Alignment of _ICapeIDLEnumeration"][::std::mem::align_of::<_ICapeIDLEnumeration>() - 8usize];
	["Offset of field: _ICapeIDLEnumeration::me"]
		[::std::mem::offset_of!(_ICapeIDLEnumeration, me) - 0usize];
	["Offset of field: _ICapeIDLEnumeration::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLEnumeration, vTbl) - 8usize];
};
pub type ICapeIDLEnumeration = _ICapeIDLEnumeration;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLEnumCollection_VTable {
	pub EnumCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub Enumeration: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			enumeration: *mut *mut ICapeIDLEnumeration,
		) -> CapeResult,
	>,
	pub EnumerationByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			enumName: *mut ICapeString,
			enumeration: *mut *mut ICapeIDLEnumeration,
		) -> CapeResult,
	>,
	pub EnumerationByUUID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const u8,
			enumeration: *mut *mut ICapeIDLEnumeration,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLEnumCollection_VTable"]
		[::std::mem::size_of::<ICapeIDLEnumCollection_VTable>() - 32usize];
	["Alignment of ICapeIDLEnumCollection_VTable"]
		[::std::mem::align_of::<ICapeIDLEnumCollection_VTable>() - 8usize];
	["Offset of field: ICapeIDLEnumCollection_VTable::EnumCount"]
		[::std::mem::offset_of!(ICapeIDLEnumCollection_VTable, EnumCount) - 0usize];
	["Offset of field: ICapeIDLEnumCollection_VTable::Enumeration"]
		[::std::mem::offset_of!(ICapeIDLEnumCollection_VTable, Enumeration) - 8usize];
	["Offset of field: ICapeIDLEnumCollection_VTable::EnumerationByName"]
		[::std::mem::offset_of!(ICapeIDLEnumCollection_VTable, EnumerationByName) - 16usize];
	["Offset of field: ICapeIDLEnumCollection_VTable::EnumerationByUUID"]
		[::std::mem::offset_of!(ICapeIDLEnumCollection_VTable, EnumerationByUUID) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLEnumCollection {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLEnumCollection_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLEnumCollection"][::std::mem::size_of::<_ICapeIDLEnumCollection>() - 16usize];
	["Alignment of _ICapeIDLEnumCollection"]
		[::std::mem::align_of::<_ICapeIDLEnumCollection>() - 8usize];
	["Offset of field: _ICapeIDLEnumCollection::me"]
		[::std::mem::offset_of!(_ICapeIDLEnumCollection, me) - 0usize];
	["Offset of field: _ICapeIDLEnumCollection::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLEnumCollection, vTbl) - 8usize];
};
pub type ICapeIDLEnumCollection = _ICapeIDLEnumCollection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLDataType_VTable {
	pub Uuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub Name: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub Type: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeIDLDataType,
	>,
	pub TemplateIndex:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub TemplateTypeCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub TemplateType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			datatype: *mut *mut _ICapeIDLDataType,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLDataType_VTable"][::std::mem::size_of::<ICapeIDLDataType_VTable>() - 48usize];
	["Alignment of ICapeIDLDataType_VTable"]
		[::std::mem::align_of::<ICapeIDLDataType_VTable>() - 8usize];
	["Offset of field: ICapeIDLDataType_VTable::Uuid"]
		[::std::mem::offset_of!(ICapeIDLDataType_VTable, Uuid) - 0usize];
	["Offset of field: ICapeIDLDataType_VTable::Name"]
		[::std::mem::offset_of!(ICapeIDLDataType_VTable, Name) - 8usize];
	["Offset of field: ICapeIDLDataType_VTable::Type"]
		[::std::mem::offset_of!(ICapeIDLDataType_VTable, Type) - 16usize];
	["Offset of field: ICapeIDLDataType_VTable::TemplateIndex"]
		[::std::mem::offset_of!(ICapeIDLDataType_VTable, TemplateIndex) - 24usize];
	["Offset of field: ICapeIDLDataType_VTable::TemplateTypeCount"]
		[::std::mem::offset_of!(ICapeIDLDataType_VTable, TemplateTypeCount) - 32usize];
	["Offset of field: ICapeIDLDataType_VTable::TemplateType"]
		[::std::mem::offset_of!(ICapeIDLDataType_VTable, TemplateType) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLDataType {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLDataType_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLDataType"][::std::mem::size_of::<_ICapeIDLDataType>() - 16usize];
	["Alignment of _ICapeIDLDataType"][::std::mem::align_of::<_ICapeIDLDataType>() - 8usize];
	["Offset of field: _ICapeIDLDataType::me"]
		[::std::mem::offset_of!(_ICapeIDLDataType, me) - 0usize];
	["Offset of field: _ICapeIDLDataType::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLDataType, vTbl) - 8usize];
};
pub type ICapeIDLDataType = _ICapeIDLDataType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLMethodArgument_VTable {
	pub attribs: ICapeIDLAttributeCollection_VTable,
	pub DataType: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *mut ICapeIDLDataType,
	>,
	pub Name: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLMethodArgument_VTable"]
		[::std::mem::size_of::<ICapeIDLMethodArgument_VTable>() - 56usize];
	["Alignment of ICapeIDLMethodArgument_VTable"]
		[::std::mem::align_of::<ICapeIDLMethodArgument_VTable>() - 8usize];
	["Offset of field: ICapeIDLMethodArgument_VTable::attribs"]
		[::std::mem::offset_of!(ICapeIDLMethodArgument_VTable, attribs) - 0usize];
	["Offset of field: ICapeIDLMethodArgument_VTable::DataType"]
		[::std::mem::offset_of!(ICapeIDLMethodArgument_VTable, DataType) - 40usize];
	["Offset of field: ICapeIDLMethodArgument_VTable::Name"]
		[::std::mem::offset_of!(ICapeIDLMethodArgument_VTable, Name) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLMethodArgument {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLMethodArgument_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLMethodArgument"][::std::mem::size_of::<_ICapeIDLMethodArgument>() - 16usize];
	["Alignment of _ICapeIDLMethodArgument"]
		[::std::mem::align_of::<_ICapeIDLMethodArgument>() - 8usize];
	["Offset of field: _ICapeIDLMethodArgument::me"]
		[::std::mem::offset_of!(_ICapeIDLMethodArgument, me) - 0usize];
	["Offset of field: _ICapeIDLMethodArgument::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLMethodArgument, vTbl) - 8usize];
};
pub type ICapeIDLMethodArgument = _ICapeIDLMethodArgument;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLMethod_VTable {
	pub attribs: ICapeIDLAttributeCollection_VTable,
	pub Name: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub ReturnType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			returntype: *mut *mut ICapeIDLDataType,
		),
	>,
	pub ArgumentCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub Argument: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			arg: *mut *mut ICapeIDLMethodArgument,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLMethod_VTable"][::std::mem::size_of::<ICapeIDLMethod_VTable>() - 72usize];
	["Alignment of ICapeIDLMethod_VTable"]
		[::std::mem::align_of::<ICapeIDLMethod_VTable>() - 8usize];
	["Offset of field: ICapeIDLMethod_VTable::attribs"]
		[::std::mem::offset_of!(ICapeIDLMethod_VTable, attribs) - 0usize];
	["Offset of field: ICapeIDLMethod_VTable::Name"]
		[::std::mem::offset_of!(ICapeIDLMethod_VTable, Name) - 40usize];
	["Offset of field: ICapeIDLMethod_VTable::ReturnType"]
		[::std::mem::offset_of!(ICapeIDLMethod_VTable, ReturnType) - 48usize];
	["Offset of field: ICapeIDLMethod_VTable::ArgumentCount"]
		[::std::mem::offset_of!(ICapeIDLMethod_VTable, ArgumentCount) - 56usize];
	["Offset of field: ICapeIDLMethod_VTable::Argument"]
		[::std::mem::offset_of!(ICapeIDLMethod_VTable, Argument) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLMethod {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLMethod_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLMethod"][::std::mem::size_of::<_ICapeIDLMethod>() - 16usize];
	["Alignment of _ICapeIDLMethod"][::std::mem::align_of::<_ICapeIDLMethod>() - 8usize];
	["Offset of field: _ICapeIDLMethod::me"][::std::mem::offset_of!(_ICapeIDLMethod, me) - 0usize];
	["Offset of field: _ICapeIDLMethod::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLMethod, vTbl) - 8usize];
};
pub type ICapeIDLMethod = _ICapeIDLMethod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLInterface_VTable {
	pub attribs: ICapeIDLAttributeCollection_VTable,
	pub Name: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub Uuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub LibraryUuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub LibraryName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub MethodCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub Method: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			method: *mut *mut ICapeIDLMethod,
		) -> CapeResult,
	>,
	pub TemplateArgCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub TemplateArg: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			name: *mut ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLInterface_VTable"]
		[::std::mem::size_of::<ICapeIDLInterface_VTable>() - 104usize];
	["Alignment of ICapeIDLInterface_VTable"]
		[::std::mem::align_of::<ICapeIDLInterface_VTable>() - 8usize];
	["Offset of field: ICapeIDLInterface_VTable::attribs"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, attribs) - 0usize];
	["Offset of field: ICapeIDLInterface_VTable::Name"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, Name) - 40usize];
	["Offset of field: ICapeIDLInterface_VTable::Uuid"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, Uuid) - 48usize];
	["Offset of field: ICapeIDLInterface_VTable::LibraryUuid"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, LibraryUuid) - 56usize];
	["Offset of field: ICapeIDLInterface_VTable::LibraryName"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, LibraryName) - 64usize];
	["Offset of field: ICapeIDLInterface_VTable::MethodCount"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, MethodCount) - 72usize];
	["Offset of field: ICapeIDLInterface_VTable::Method"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, Method) - 80usize];
	["Offset of field: ICapeIDLInterface_VTable::TemplateArgCount"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, TemplateArgCount) - 88usize];
	["Offset of field: ICapeIDLInterface_VTable::TemplateArg"]
		[::std::mem::offset_of!(ICapeIDLInterface_VTable, TemplateArg) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLInterface {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLInterface_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLInterface"][::std::mem::size_of::<_ICapeIDLInterface>() - 16usize];
	["Alignment of _ICapeIDLInterface"][::std::mem::align_of::<_ICapeIDLInterface>() - 8usize];
	["Offset of field: _ICapeIDLInterface::me"]
		[::std::mem::offset_of!(_ICapeIDLInterface, me) - 0usize];
	["Offset of field: _ICapeIDLInterface::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLInterface, vTbl) - 8usize];
};
pub type ICapeIDLInterface = _ICapeIDLInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLInterfaceCollection_VTable {
	pub InterfaceCount:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeInteger>,
	pub Interface: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			iface: *mut *mut ICapeIDLInterface,
		) -> CapeResult,
	>,
	pub InterfaceByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			interfaceName: *mut ICapeString,
			iface: *mut *mut ICapeIDLInterface,
		) -> CapeResult,
	>,
	pub InterfaceByUUID: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uuid: *const u8,
			iface: *mut *mut ICapeIDLInterface,
		) -> CapeResult,
	>,
	pub SortNoDependence:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLInterfaceCollection_VTable"]
		[::std::mem::size_of::<ICapeIDLInterfaceCollection_VTable>() - 40usize];
	["Alignment of ICapeIDLInterfaceCollection_VTable"]
		[::std::mem::align_of::<ICapeIDLInterfaceCollection_VTable>() - 8usize];
	["Offset of field: ICapeIDLInterfaceCollection_VTable::InterfaceCount"]
		[::std::mem::offset_of!(ICapeIDLInterfaceCollection_VTable, InterfaceCount) - 0usize];
	["Offset of field: ICapeIDLInterfaceCollection_VTable::Interface"]
		[::std::mem::offset_of!(ICapeIDLInterfaceCollection_VTable, Interface) - 8usize];
	["Offset of field: ICapeIDLInterfaceCollection_VTable::InterfaceByName"]
		[::std::mem::offset_of!(ICapeIDLInterfaceCollection_VTable, InterfaceByName) - 16usize];
	["Offset of field: ICapeIDLInterfaceCollection_VTable::InterfaceByUUID"]
		[::std::mem::offset_of!(ICapeIDLInterfaceCollection_VTable, InterfaceByUUID) - 24usize];
	["Offset of field: ICapeIDLInterfaceCollection_VTable::SortNoDependence"]
		[::std::mem::offset_of!(ICapeIDLInterfaceCollection_VTable, SortNoDependence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLInterfaceCollection {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLInterfaceCollection_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLInterfaceCollection"]
		[::std::mem::size_of::<_ICapeIDLInterfaceCollection>() - 16usize];
	["Alignment of _ICapeIDLInterfaceCollection"]
		[::std::mem::align_of::<_ICapeIDLInterfaceCollection>() - 8usize];
	["Offset of field: _ICapeIDLInterfaceCollection::me"]
		[::std::mem::offset_of!(_ICapeIDLInterfaceCollection, me) - 0usize];
	["Offset of field: _ICapeIDLInterfaceCollection::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLInterfaceCollection, vTbl) - 8usize];
};
pub type ICapeIDLInterfaceCollection = _ICapeIDLInterfaceCollection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLTypeContainer_VTable {
	pub catIDs: ICapeIDLCategoryIDCollection_VTable,
	pub enums: ICapeIDLEnumCollection_VTable,
	pub interfaces: ICapeIDLInterfaceCollection_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLTypeContainer_VTable"]
		[::std::mem::size_of::<ICapeIDLTypeContainer_VTable>() - 104usize];
	["Alignment of ICapeIDLTypeContainer_VTable"]
		[::std::mem::align_of::<ICapeIDLTypeContainer_VTable>() - 8usize];
	["Offset of field: ICapeIDLTypeContainer_VTable::catIDs"]
		[::std::mem::offset_of!(ICapeIDLTypeContainer_VTable, catIDs) - 0usize];
	["Offset of field: ICapeIDLTypeContainer_VTable::enums"]
		[::std::mem::offset_of!(ICapeIDLTypeContainer_VTable, enums) - 32usize];
	["Offset of field: ICapeIDLTypeContainer_VTable::interfaces"]
		[::std::mem::offset_of!(ICapeIDLTypeContainer_VTable, interfaces) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLTypeContainer {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLTypeContainer_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLTypeContainer"][::std::mem::size_of::<_ICapeIDLTypeContainer>() - 16usize];
	["Alignment of _ICapeIDLTypeContainer"]
		[::std::mem::align_of::<_ICapeIDLTypeContainer>() - 8usize];
	["Offset of field: _ICapeIDLTypeContainer::me"]
		[::std::mem::offset_of!(_ICapeIDLTypeContainer, me) - 0usize];
	["Offset of field: _ICapeIDLTypeContainer::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLTypeContainer, vTbl) - 8usize];
};
pub type ICapeIDLTypeContainer = _ICapeIDLTypeContainer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLLibrary_VTable {
	pub base: ICobiaBase_VTable,
	pub attribs: ICapeIDLAttributeCollection_VTable,
	pub types: ICapeIDLTypeContainer_VTable,
	pub Name: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString),
	>,
	pub Uuid: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> *const u8,
	>,
	pub Path: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, path: *mut ICapeString),
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLLibrary_VTable"][::std::mem::size_of::<ICapeIDLLibrary_VTable>() - 184usize];
	["Alignment of ICapeIDLLibrary_VTable"]
		[::std::mem::align_of::<ICapeIDLLibrary_VTable>() - 8usize];
	["Offset of field: ICapeIDLLibrary_VTable::base"]
		[::std::mem::offset_of!(ICapeIDLLibrary_VTable, base) - 0usize];
	["Offset of field: ICapeIDLLibrary_VTable::attribs"]
		[::std::mem::offset_of!(ICapeIDLLibrary_VTable, attribs) - 16usize];
	["Offset of field: ICapeIDLLibrary_VTable::types"]
		[::std::mem::offset_of!(ICapeIDLLibrary_VTable, types) - 56usize];
	["Offset of field: ICapeIDLLibrary_VTable::Name"]
		[::std::mem::offset_of!(ICapeIDLLibrary_VTable, Name) - 160usize];
	["Offset of field: ICapeIDLLibrary_VTable::Uuid"]
		[::std::mem::offset_of!(ICapeIDLLibrary_VTable, Uuid) - 168usize];
	["Offset of field: ICapeIDLLibrary_VTable::Path"]
		[::std::mem::offset_of!(ICapeIDLLibrary_VTable, Path) - 176usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLLibrary {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut ICapeIDLLibrary_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLLibrary"][::std::mem::size_of::<_ICapeIDLLibrary>() - 16usize];
	["Alignment of _ICapeIDLLibrary"][::std::mem::align_of::<_ICapeIDLLibrary>() - 8usize];
	["Offset of field: _ICapeIDLLibrary::me"]
		[::std::mem::offset_of!(_ICapeIDLLibrary, me) - 0usize];
	["Offset of field: _ICapeIDLLibrary::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLLibrary, vTbl) - 8usize];
};
pub type ICapeIDLLibrary = _ICapeIDLLibrary;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ICapeIDLParseResult_VTable {
	pub base: ICobiaBase_VTable,
	pub types: ICapeIDLTypeContainer_VTable,
	pub GetLibraryCount: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> i32,
	>,
	pub GetLibrary: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			lib: *mut *mut ICapeIDLLibrary,
		) -> CapeResult,
	>,
	pub GetError: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, error: *mut ICapeString),
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of ICapeIDLParseResult_VTable"]
		[::std::mem::size_of::<ICapeIDLParseResult_VTable>() - 144usize];
	["Alignment of ICapeIDLParseResult_VTable"]
		[::std::mem::align_of::<ICapeIDLParseResult_VTable>() - 8usize];
	["Offset of field: ICapeIDLParseResult_VTable::base"]
		[::std::mem::offset_of!(ICapeIDLParseResult_VTable, base) - 0usize];
	["Offset of field: ICapeIDLParseResult_VTable::types"]
		[::std::mem::offset_of!(ICapeIDLParseResult_VTable, types) - 16usize];
	["Offset of field: ICapeIDLParseResult_VTable::GetLibraryCount"]
		[::std::mem::offset_of!(ICapeIDLParseResult_VTable, GetLibraryCount) - 120usize];
	["Offset of field: ICapeIDLParseResult_VTable::GetLibrary"]
		[::std::mem::offset_of!(ICapeIDLParseResult_VTable, GetLibrary) - 128usize];
	["Offset of field: ICapeIDLParseResult_VTable::GetError"]
		[::std::mem::offset_of!(ICapeIDLParseResult_VTable, GetError) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICapeIDLParseResult {
	#[doc = "!<object pointer"]
	pub me: *mut ::std::os::raw::c_void,
	#[doc = "!<function pointer table"]
	pub vTbl: *mut ICapeIDLParseResult_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _ICapeIDLParseResult"][::std::mem::size_of::<_ICapeIDLParseResult>() - 16usize];
	["Alignment of _ICapeIDLParseResult"][::std::mem::align_of::<_ICapeIDLParseResult>() - 8usize];
	["Offset of field: _ICapeIDLParseResult::me"]
		[::std::mem::offset_of!(_ICapeIDLParseResult, me) - 0usize];
	["Offset of field: _ICapeIDLParseResult::vTbl"]
		[::std::mem::offset_of!(_ICapeIDLParseResult, vTbl) - 8usize];
};
pub type ICapeIDLParseResult = _ICapeIDLParseResult;
unsafe extern "C" {
	pub fn CapeIDLParse(idlFiles: *mut ICapeArrayString) -> *mut ICapeIDLParseResult;
}
unsafe extern "C" {
	pub fn capeInitialize(error: *mut ICapeString) -> bool;
}
unsafe extern "C" {
	pub fn capeCleanup();
}
unsafe extern "C" {
	pub fn capeGenerateUUID() -> CapeUUID;
}
unsafe extern "C" {
	pub fn capeUUIDFromString(str_: *const CapeCharacter, res: *mut CapeUUID) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeStringFromUUID(uuid: *const CapeUUID, res: *mut ICapeString) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetCobiaLanguage(res: *mut ICapeString) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetCobiaVersion(res: *mut ICapeString) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetCOBIAFolder(res: *mut ICapeString) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetCOBIADataFolder(res: *mut ICapeString) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetCOBIAUserDataFolder(res: *mut ICapeString) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetErrorDescription(errorCode: CapeResult, res: *mut ICapeString) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeCreatePMCInstance(
		uuid: *const CapeUUID,
		flags: CapePMCCreationFlags,
		res: *mut ICapeInterface,
	) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetRegistryKey(
		keyName: *const CapeCharacter,
		key: *mut *mut ICapeRegistryKey,
	) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetRegistryWriter(
		allUsers: bool,
		writer: *mut *mut ICapeRegistryWriter,
	) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetPMCEnumerator(pmcEnumerator: *mut *mut ICapePMCEnumerator) -> CapeResult;
}
unsafe extern "C" {
	pub fn capeGetLibraryEnumerator(
		libraryEnumerator: *mut *mut ICapeLibraryEnumerator,
	) -> CapeResult;
}
unsafe extern "C" {
	pub fn cobiaDepersistFromTransitionFormat(
		reader: *mut ICapeInterface,
		transitionFormat: *mut *mut ICapeInterface,
		majorVersion: CapeInteger,
		minorVersion: CapeInteger,
	) -> CapeResult;
}
unsafe extern "C" {
	pub fn cobiaDepersistPMCFromTransitionFormat(
		PMC: *mut ICapeInterface,
		reader: *mut ICapeInterface,
		majorVersion: CapeInteger,
		minorVersion: CapeInteger,
	) -> CapeResult;
}
unsafe extern "C" {
	pub fn getCobiaDataClassFactories() -> *mut ICobiaDataClassFactory;
}
unsafe extern "C" {
	pub fn COBIAParseIDL(
		libraries: *mut ICapeArrayString,
		result: *mut *mut ICapeIDLParseResult,
	) -> CapeResult;
}
unsafe extern "C" {
	pub static libraryId_CAPEOPEN: CapeUUID;
}
unsafe extern "C" {
	pub static categoryId_CAPEOPEN_UnitOperation: CapeUUID;
}
unsafe extern "C" {
	pub static categoryId_CAPEOPEN_PropertyPackageManager: CapeUUID;
}
unsafe extern "C" {
	pub static categoryId_CAPEOPEN_StandAlonePropertyPackage: CapeUUID;
}
unsafe extern "C" {
	pub static categoryId_CAPEOPEN_PhysicalPropertyCalculator: CapeUUID;
}
unsafe extern "C" {
	pub static categoryId_CAPEOPEN_EquilibriumCalculator: CapeUUID;
}
unsafe extern "C" {
	pub static categoryId_CAPEOPEN_FlowsheetMonitoringComponent: CapeUUID;
}
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_REAL: eCAPEOPEN_1_2_CapeParamType = 0;
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_INTEGER: eCAPEOPEN_1_2_CapeParamType = 1;
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_STRING: eCAPEOPEN_1_2_CapeParamType = 2;
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_BOOLEAN: eCAPEOPEN_1_2_CapeParamType = 3;
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_ARRAY_REAL: eCAPEOPEN_1_2_CapeParamType = 4;
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_ARRAY_INTEGER: eCAPEOPEN_1_2_CapeParamType = 5;
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_ARRAY_STRING: eCAPEOPEN_1_2_CapeParamType = 6;
pub const eCAPEOPEN_1_2_CapeParamType_CAPE_PARAMETER_ARRAY_BOOLEAN: eCAPEOPEN_1_2_CapeParamType = 7;
pub type eCAPEOPEN_1_2_CapeParamType = i32;
pub use self::eCAPEOPEN_1_2_CapeParamType as CAPEOPEN_1_2_CapeParamType;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_METER: eCAPEOPEN_1_2_CapeDimensionality = 0;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_KILOGRAM: eCAPEOPEN_1_2_CapeDimensionality = 1;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_SECOND: eCAPEOPEN_1_2_CapeDimensionality = 2;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_AMPERE: eCAPEOPEN_1_2_CapeDimensionality = 3;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_KELVIN: eCAPEOPEN_1_2_CapeDimensionality = 4;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_MOLE: eCAPEOPEN_1_2_CapeDimensionality = 5;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_CANDELA: eCAPEOPEN_1_2_CapeDimensionality = 6;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_RADIAN: eCAPEOPEN_1_2_CapeDimensionality = 7;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_DIFFERENCE_FLAG: eCAPEOPEN_1_2_CapeDimensionality =
	8;
pub const eCAPEOPEN_1_2_CapeDimensionality_CAPE_DIMENSIONALITY_LENGTH:
	eCAPEOPEN_1_2_CapeDimensionality = 9;
pub type eCAPEOPEN_1_2_CapeDimensionality = i32;
pub use self::eCAPEOPEN_1_2_CapeDimensionality as CAPEOPEN_1_2_CapeDimensionality;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_REAL:
	eCAPEOPEN_1_2_CapePersistedDataType = 0;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_INTEGER:
	eCAPEOPEN_1_2_CapePersistedDataType = 1;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_BOOLEAN:
	eCAPEOPEN_1_2_CapePersistedDataType = 2;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_STRING:
	eCAPEOPEN_1_2_CapePersistedDataType = 3;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ENUMERATION:
	eCAPEOPEN_1_2_CapePersistedDataType = 4;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_VALUE:
	eCAPEOPEN_1_2_CapePersistedDataType = 5;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ARRAY_REAL:
	eCAPEOPEN_1_2_CapePersistedDataType = 6;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ARRAY_INTEGER:
	eCAPEOPEN_1_2_CapePersistedDataType = 7;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ARRAY_BOOLEAN:
	eCAPEOPEN_1_2_CapePersistedDataType = 8;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ARRAY_STRING:
	eCAPEOPEN_1_2_CapePersistedDataType = 9;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ARRAY_ENUMERATION:
	eCAPEOPEN_1_2_CapePersistedDataType = 10;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ARRAY_VALUE:
	eCAPEOPEN_1_2_CapePersistedDataType = 11;
pub const eCAPEOPEN_1_2_CapePersistedDataType_CAPE_PERSISTED_ARRAY_BYTE:
	eCAPEOPEN_1_2_CapePersistedDataType = 12;
pub type eCAPEOPEN_1_2_CapePersistedDataType = i32;
pub use self::eCAPEOPEN_1_2_CapePersistedDataType as CAPEOPEN_1_2_CapePersistedDataType;
pub const eCAPEOPEN_1_2_CapeParamMode_CAPE_INPUT: eCAPEOPEN_1_2_CapeParamMode = 1;
pub const eCAPEOPEN_1_2_CapeParamMode_CAPE_OUTPUT: eCAPEOPEN_1_2_CapeParamMode = 2;
pub const eCAPEOPEN_1_2_CapeParamMode_CAPE_INPUT_OUTPUT: eCAPEOPEN_1_2_CapeParamMode = 3;
pub type eCAPEOPEN_1_2_CapeParamMode = i32;
pub use self::eCAPEOPEN_1_2_CapeParamMode as CAPEOPEN_1_2_CapeParamMode;
pub const eCAPEOPEN_1_2_CapeValidationStatus_CAPE_NOT_VALIDATED:
	eCAPEOPEN_1_2_CapeValidationStatus = 0;
pub const eCAPEOPEN_1_2_CapeValidationStatus_CAPE_INVALID: eCAPEOPEN_1_2_CapeValidationStatus = 1;
pub const eCAPEOPEN_1_2_CapeValidationStatus_CAPE_VALID: eCAPEOPEN_1_2_CapeValidationStatus = 2;
pub type eCAPEOPEN_1_2_CapeValidationStatus = i32;
pub use self::eCAPEOPEN_1_2_CapeValidationStatus as CAPEOPEN_1_2_CapeValidationStatus;
pub const eCAPEOPEN_1_2_CapeCalculationCode_CAPE_NO_CALCULATION: eCAPEOPEN_1_2_CapeCalculationCode =
	0;
pub const eCAPEOPEN_1_2_CapeCalculationCode_CAPE_LOG_FUGACITY_COEFFICIENTS:
	eCAPEOPEN_1_2_CapeCalculationCode = 1;
pub const eCAPEOPEN_1_2_CapeCalculationCode_CAPE_T_DERIVATIVE: eCAPEOPEN_1_2_CapeCalculationCode =
	2;
pub const eCAPEOPEN_1_2_CapeCalculationCode_CAPE_P_DERIVATIVE: eCAPEOPEN_1_2_CapeCalculationCode =
	4;
pub const eCAPEOPEN_1_2_CapeCalculationCode_CAPE_MOLE_NUMBERS_DERIVATIVES:
	eCAPEOPEN_1_2_CapeCalculationCode = 8;
pub type eCAPEOPEN_1_2_CapeCalculationCode = i32;
pub use self::eCAPEOPEN_1_2_CapeCalculationCode as CAPEOPEN_1_2_CapeCalculationCode;
pub const eCAPEOPEN_1_2_CapePhaseStatus_CAPE_UNKNOWNPHASESTATUS: eCAPEOPEN_1_2_CapePhaseStatus = 0;
pub const eCAPEOPEN_1_2_CapePhaseStatus_CAPE_ATEQUILIBRIUM: eCAPEOPEN_1_2_CapePhaseStatus = 1;
pub const eCAPEOPEN_1_2_CapePhaseStatus_CAPE_ESTIMATES: eCAPEOPEN_1_2_CapePhaseStatus = 2;
pub type eCAPEOPEN_1_2_CapePhaseStatus = i32;
pub use self::eCAPEOPEN_1_2_CapePhaseStatus as CAPEOPEN_1_2_CapePhaseStatus;
pub const eCAPEOPEN_1_2_CapeEditResult_CAPE_MODIFIED: eCAPEOPEN_1_2_CapeEditResult = 0;
pub const eCAPEOPEN_1_2_CapeEditResult_CAPE_NOT_MODIFIED: eCAPEOPEN_1_2_CapeEditResult = 1;
pub type eCAPEOPEN_1_2_CapeEditResult = i32;
pub use self::eCAPEOPEN_1_2_CapeEditResult as CAPEOPEN_1_2_CapeEditResult;
pub const eCAPEOPEN_1_2_CapePortType_CAPE_MATERIAL: eCAPEOPEN_1_2_CapePortType = 0;
pub const eCAPEOPEN_1_2_CapePortType_CAPE_ENERGY: eCAPEOPEN_1_2_CapePortType = 1;
pub const eCAPEOPEN_1_2_CapePortType_CAPE_INFORMATION: eCAPEOPEN_1_2_CapePortType = 2;
pub const eCAPEOPEN_1_2_CapePortType_CAPE_ANY: eCAPEOPEN_1_2_CapePortType = 3;
pub type eCAPEOPEN_1_2_CapePortType = i32;
pub use self::eCAPEOPEN_1_2_CapePortType as CAPEOPEN_1_2_CapePortType;
pub const eCAPEOPEN_1_2_CapePortDirection_CAPE_INLET: eCAPEOPEN_1_2_CapePortDirection = 0;
pub const eCAPEOPEN_1_2_CapePortDirection_CAPE_OUTLET: eCAPEOPEN_1_2_CapePortDirection = 1;
pub const eCAPEOPEN_1_2_CapePortDirection_CAPE_INLET_OUTLET: eCAPEOPEN_1_2_CapePortDirection = 2;
pub type eCAPEOPEN_1_2_CapePortDirection = i32;
pub use self::eCAPEOPEN_1_2_CapePortDirection as CAPEOPEN_1_2_CapePortDirection;
pub const eCAPEOPEN_1_2_CapeSolutionStatus_CAPE_SOLVED: eCAPEOPEN_1_2_CapeSolutionStatus = 0;
pub const eCAPEOPEN_1_2_CapeSolutionStatus_CAPE_NOT_SOLVED: eCAPEOPEN_1_2_CapeSolutionStatus = 1;
pub type eCAPEOPEN_1_2_CapeSolutionStatus = i32;
pub use self::eCAPEOPEN_1_2_CapeSolutionStatus as CAPEOPEN_1_2_CapeSolutionStatus;
pub const eCAPEOPEN_1_2_CapeStreamType_CAPE_ANY_STREAMS: eCAPEOPEN_1_2_CapeStreamType = 0;
pub const eCAPEOPEN_1_2_CapeStreamType_CAPE_MATERIAL_STREAM: eCAPEOPEN_1_2_CapeStreamType = 1;
pub const eCAPEOPEN_1_2_CapeStreamType_CAPE_ENERGY_STREAM: eCAPEOPEN_1_2_CapeStreamType = 2;
pub const eCAPEOPEN_1_2_CapeStreamType_CAPE_INFORMATION_STREAM: eCAPEOPEN_1_2_CapeStreamType = 3;
pub type eCAPEOPEN_1_2_CapeStreamType = i32;
pub use self::eCAPEOPEN_1_2_CapeStreamType as CAPEOPEN_1_2_CapeStreamType;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_UNIT_OPERATION_ADDED:
	eCAPEOPEN_1_2_CapeMonitoringEvent = 0;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_UNIT_OPERATION_RENAMED:
	eCAPEOPEN_1_2_CapeMonitoringEvent = 1;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_UNIT_OPERATION_REMOVED:
	eCAPEOPEN_1_2_CapeMonitoringEvent = 2;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_STREAM_ADDED: eCAPEOPEN_1_2_CapeMonitoringEvent =
	3;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_STREAM_RENAMED: eCAPEOPEN_1_2_CapeMonitoringEvent =
	4;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_STREAM_REMOVED: eCAPEOPEN_1_2_CapeMonitoringEvent =
	5;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_CONNECTION_CHANGED:
	eCAPEOPEN_1_2_CapeMonitoringEvent = 6;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_FLOWSHEET_SOLUTION_STATUS_CHANGED:
	eCAPEOPEN_1_2_CapeMonitoringEvent = 7;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_NEXT_TIME_STEP: eCAPEOPEN_1_2_CapeMonitoringEvent =
	8;
pub const eCAPEOPEN_1_2_CapeMonitoringEvent_CAPE_FLOWSHEET_VALIDATION_STATUS_CHANGED:
	eCAPEOPEN_1_2_CapeMonitoringEvent = 9;
pub type eCAPEOPEN_1_2_CapeMonitoringEvent = i32;
pub use self::eCAPEOPEN_1_2_CapeMonitoringEvent as CAPEOPEN_1_2_CapeMonitoringEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeIdentification_VTable {
	pub base: ICapeInterface_VTable,
	pub getComponentName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString) -> CapeResult,
	>,
	pub putComponentName: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, name: *mut ICapeString) -> CapeResult,
	>,
	pub getComponentDescription: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, desc: *mut ICapeString) -> CapeResult,
	>,
	pub putComponentDescription: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, desc: *mut ICapeString) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeIdentification_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeIdentification_VTable>() - 64usize];
	["Alignment of CAPEOPEN_1_2_ICapeIdentification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeIdentification_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIdentification_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeIdentification_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIdentification_VTable::getComponentName"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIdentification_VTable,
		getComponentName
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIdentification_VTable::putComponentName"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIdentification_VTable,
		putComponentName
	) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIdentification_VTable::getComponentDescription"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIdentification_VTable,
		getComponentDescription
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIdentification_VTable::putComponentDescription"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIdentification_VTable,
		putComponentDescription
	)
		- 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeIdentification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeIdentification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeIdentification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeIdentification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeIdentification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeIdentification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeIdentification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeIdentification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeIdentification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeIdentification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeIdentification = _CAPEOPEN_1_2_ICapeIdentification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeCollection_VTable {
	pub base: ICapeInterface_VTable,
	pub ItemByIndex: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			index: CapeInteger,
			item: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub ItemByName: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			item: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub getCount: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			itemCount: *mut CapeInteger,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeCollection_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeCollection_VTable>() - 56usize];
	["Alignment of CAPEOPEN_1_2_ICapeCollection_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeCollection_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCollection_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeCollection_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCollection_VTable::ItemByIndex"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeCollection_VTable, ItemByIndex) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCollection_VTable::ItemByName"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeCollection_VTable, ItemByName) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCollection_VTable::getCount"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeCollection_VTable, getCount) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeCollection {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeCollection_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeCollection"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeCollection>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeCollection"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeCollection>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeCollection::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeCollection, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeCollection::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeCollection, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeCollection = _CAPEOPEN_1_2_ICapeCollection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValStatus: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valStatus: *mut CAPEOPEN_1_2_CapeValidationStatus,
		) -> CapeResult,
	>,
	pub getMode: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			mode: *mut CAPEOPEN_1_2_CapeParamMode,
		) -> CapeResult,
	>,
	pub getType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			parameterType: *mut CAPEOPEN_1_2_CapeParamType,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Reset:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeParameter_VTable>() - 72usize];
	["Alignment of CAPEOPEN_1_2_ICapeParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameter_VTable::getValStatus"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeParameter_VTable, getValStatus) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameter_VTable::getMode"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeParameter_VTable, getMode) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameter_VTable::getType"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeParameter_VTable, getType) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameter_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeParameter_VTable, Validate) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameter_VTable::Reset"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeParameter_VTable, Reset) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeParameter = _CAPEOPEN_1_2_ICapeParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeRealParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: *mut CapeReal) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: CapeReal) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeReal,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, lBound: *mut CapeReal) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uBound: *mut CapeReal) -> CapeResult,
	>,
	pub getDimensionality: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			dimensionality: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: CapeReal,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeRealParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeRealParameter_VTable>() - 88usize];
	["Alignment of CAPEOPEN_1_2_ICapeRealParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeRealParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeRealParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::getValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeRealParameter_VTable, getValue) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::putValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeRealParameter_VTable, putValue) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::getDefaultValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeRealParameter_VTable, getDefaultValue) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::getLowerBound"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeRealParameter_VTable, getLowerBound) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::getUpperBound"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeRealParameter_VTable, getUpperBound) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::getDimensionality"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeRealParameter_VTable,
		getDimensionality
	) - 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameter_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeRealParameter_VTable, Validate) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeRealParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeRealParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeRealParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeRealParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeRealParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeRealParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeRealParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeRealParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeRealParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeRealParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeRealParameter = _CAPEOPEN_1_2_ICapeRealParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeIntegerParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: CapeInteger) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			lBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: CapeInteger,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeIntegerParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeIntegerParameter_VTable>() - 80usize];
	["Alignment of CAPEOPEN_1_2_ICapeIntegerParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeIntegerParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeIntegerParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameter_VTable::getValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeIntegerParameter_VTable, getValue) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameter_VTable::putValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeIntegerParameter_VTable, putValue) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameter_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameter_VTable,
		getDefaultValue
	) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameter_VTable::getLowerBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameter_VTable,
		getLowerBound
	) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameter_VTable::getUpperBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameter_VTable,
		getUpperBound
	) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameter_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeIntegerParameter_VTable, Validate) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeIntegerParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeIntegerParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeIntegerParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeIntegerParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeIntegerParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeIntegerParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeIntegerParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeIntegerParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeIntegerParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeIntegerParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeIntegerParameter = _CAPEOPEN_1_2_ICapeIntegerParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeStringParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getOptionList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			optionNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getRestrictedToList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			restricted: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeString,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeStringParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeStringParameter_VTable>() - 80usize];
	["Alignment of CAPEOPEN_1_2_ICapeStringParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeStringParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStringParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameter_VTable::getValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStringParameter_VTable, getValue) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameter_VTable::putValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStringParameter_VTable, putValue) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameter_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStringParameter_VTable,
		getDefaultValue
	) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameter_VTable::getOptionList"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStringParameter_VTable, getOptionList) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameter_VTable::getRestrictedToList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStringParameter_VTable,
		getRestrictedToList
	) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameter_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStringParameter_VTable, Validate) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeStringParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeStringParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeStringParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeStringParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeStringParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeStringParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeStringParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeStringParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeStringParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeStringParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeStringParameter = _CAPEOPEN_1_2_ICapeStringParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeBooleanParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, value: CapeBoolean) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: CapeBoolean,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeBooleanParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeBooleanParameter_VTable>() - 64usize];
	["Alignment of CAPEOPEN_1_2_ICapeBooleanParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeBooleanParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeBooleanParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameter_VTable::getValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeBooleanParameter_VTable, getValue) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameter_VTable::putValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeBooleanParameter_VTable, putValue) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameter_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeBooleanParameter_VTable,
		getDefaultValue
	) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameter_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeBooleanParameter_VTable, Validate) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeBooleanParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeBooleanParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeBooleanParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeBooleanParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeBooleanParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeBooleanParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeBooleanParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeBooleanParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeBooleanParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeBooleanParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeBooleanParameter = _CAPEOPEN_1_2_ICapeBooleanParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getNumDimensions: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			numDimensions: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getSize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: *mut ICapeArrayInteger,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeArrayParameter_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayParameter_VTable::getNumDimensions"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayParameter_VTable,
		getNumDimensions
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayParameter_VTable::getSize"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayParameter_VTable, getSize) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayParameter = _CAPEOPEN_1_2_ICapeArrayParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayRealParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub GetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: *mut CapeReal,
		) -> CapeResult,
	>,
	pub SetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeReal,
		) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeReal,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, lBound: *mut CapeReal) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uBound: *mut CapeReal) -> CapeResult,
	>,
	pub getDimensionality: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			dimensionality: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeReal,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayReal,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayRealParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeArrayRealParameter_VTable>() - 112usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayRealParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayRealParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayRealParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::getValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayRealParameter_VTable, getValue) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::putValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayRealParameter_VTable, putValue) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::GetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
		GetElementValue
	) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::SetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
		SetElementValue
	) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
		getDefaultValue
	) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::getLowerBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
		getLowerBound
	) - 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::getUpperBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
		getUpperBound
	) - 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::getDimensionality"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
		getDimensionality
	)
		- 88usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::ValidateElement"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
		ValidateElement
	) - 96usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameter_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayRealParameter_VTable, Validate) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayRealParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayRealParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayRealParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayRealParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayRealParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayRealParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayRealParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayRealParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayRealParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayRealParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayRealParameter = _CAPEOPEN_1_2_ICapeArrayRealParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayInteger,
		) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayInteger,
		) -> CapeResult,
	>,
	pub GetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub SetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeInteger,
		) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			lBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeInteger,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayInteger,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable>() - 104usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::getValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		getValue
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::putValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		putValue
	) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::GetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		GetElementValue
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::SetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		SetElementValue
	)
		- 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		getDefaultValue
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::getLowerBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		getLowerBound
	) - 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::getUpperBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		getUpperBound
	) - 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::ValidateElement"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		ValidateElement
	)
		- 88usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
		Validate
	) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayIntegerParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayIntegerParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayIntegerParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayIntegerParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayIntegerParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayIntegerParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayIntegerParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayIntegerParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayIntegerParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayIntegerParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayIntegerParameter = _CAPEOPEN_1_2_ICapeArrayIntegerParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayStringParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub GetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub SetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getOptionList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			optionNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getRestrictedToList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			restricted: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: *mut ICapeString,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayString,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayStringParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeArrayStringParameter_VTable>() - 104usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayStringParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayStringParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayStringParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::getValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayStringParameter_VTable, getValue) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::putValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayStringParameter_VTable, putValue) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::GetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameter_VTable,
		GetElementValue
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::SetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameter_VTable,
		SetElementValue
	)
		- 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameter_VTable,
		getDefaultValue
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::getOptionList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameter_VTable,
		getOptionList
	) - 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::getRestrictedToList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameter_VTable,
		getRestrictedToList
	)
		- 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::ValidateElement"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameter_VTable,
		ValidateElement
	)
		- 88usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameter_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayStringParameter_VTable, Validate) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayStringParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayStringParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayStringParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayStringParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayStringParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayStringParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayStringParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayStringParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayStringParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayStringParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayStringParameter = _CAPEOPEN_1_2_ICapeArrayStringParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable {
	pub base: ICapeInterface_VTable,
	pub getValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayBoolean,
		) -> CapeResult,
	>,
	pub putValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayBoolean,
		) -> CapeResult,
	>,
	pub GetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub SetElementValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeBoolean,
		) -> CapeResult,
	>,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeBoolean,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayBoolean,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable>() - 88usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::getValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
		getValue
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::putValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
		putValue
	) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::GetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
		GetElementValue
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::SetElementValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
		SetElementValue
	)
		- 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
		getDefaultValue
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::ValidateElement"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
		ValidateElement
	)
		- 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
		Validate
	) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayBooleanParameter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayBooleanParameter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayBooleanParameter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayBooleanParameter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayBooleanParameter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayBooleanParameter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayBooleanParameter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayBooleanParameter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayBooleanParameter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayBooleanParameter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayBooleanParameter = _CAPEOPEN_1_2_ICapeArrayBooleanParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			parameterType: *mut CAPEOPEN_1_2_CapeParamType,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeParameterSpecification_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeParameterSpecification_VTable>() - 40usize];
	["Alignment of CAPEOPEN_1_2_ICapeParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeParameterSpecification_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameterSpecification_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeParameterSpecification_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeParameterSpecification_VTable::getType"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeParameterSpecification_VTable,
		getType
	) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeParameterSpecification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeParameterSpecification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeParameterSpecification = _CAPEOPEN_1_2_ICapeParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeReal,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, lBound: *mut CapeReal) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uBound: *mut CapeReal) -> CapeResult,
	>,
	pub getDimensionality: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			dimensionality: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: CapeReal,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable>() - 72usize];
	["Alignment of CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable,
		getDefaultValue
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable::getLowerBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable,
		getLowerBound
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable::getUpperBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable,
		getUpperBound
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable::getDimensionality"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable,
		getDimensionality
	)
		- 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable,
		Validate
	) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeRealParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeRealParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeRealParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeRealParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeRealParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeRealParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeRealParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeRealParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeRealParameterSpecification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeRealParameterSpecification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeRealParameterSpecification =
	_CAPEOPEN_1_2_ICapeRealParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			lBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: CapeInteger,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable>() - 64usize];
	["Alignment of CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable,
		getDefaultValue
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable::getLowerBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable,
		getLowerBound
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable::getUpperBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable,
		getUpperBound
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable,
		Validate
	)
		- 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeIntegerParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeIntegerParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeIntegerParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeIntegerParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeIntegerParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeIntegerParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeIntegerParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeIntegerParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeIntegerParameterSpecification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeIntegerParameterSpecification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeIntegerParameterSpecification =
	_CAPEOPEN_1_2_ICapeIntegerParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getOptionList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			optionNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getRestrictedToList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			restricted: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeString,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable>() - 64usize];
	["Alignment of CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable,
		getDefaultValue
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable::getOptionList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable,
		getOptionList
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable::getRestrictedToList"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable , getRestrictedToList) - 48usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable,
		Validate
	)
		- 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeStringParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeStringParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeStringParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeStringParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeStringParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeStringParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeStringParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeStringParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeStringParameterSpecification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeStringParameterSpecification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeStringParameterSpecification =
	_CAPEOPEN_1_2_ICapeStringParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: CapeBoolean,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable::getDefaultValue"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable,
		getDefaultValue
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable,
		Validate
	)
		- 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeBooleanParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeBooleanParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeBooleanParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeBooleanParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeBooleanParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeBooleanParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeBooleanParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeBooleanParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeBooleanParameterSpecification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeBooleanParameterSpecification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeBooleanParameterSpecification =
	_CAPEOPEN_1_2_ICapeBooleanParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getNumDimensions: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			numDimensions: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getSize: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			size: *mut ICapeArrayInteger,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable::getNumDimensions"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable,
		getNumDimensions
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable::getSize"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable,
		getSize
	) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayParameterSpecification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayParameterSpecification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayParameterSpecification =
	_CAPEOPEN_1_2_ICapeArrayParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeReal,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, lBound: *mut CapeReal) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, uBound: *mut CapeReal) -> CapeResult,
	>,
	pub getDimensionality: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			dimensionality: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeReal,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayReal,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable"][::std::mem::size_of::<
		CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable,
	>() - 80usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable"][::std::mem::align_of::<
		CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable,
	>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable::getDefaultValue"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable , getDefaultValue) - 32usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable::getLowerBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable,
		getLowerBound
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable::getUpperBound"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable,
		getUpperBound
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable::getDimensionality"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable , getDimensionality) - 56usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable::ValidateElement"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable , ValidateElement) - 64usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable,
		Validate
	)
		- 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayRealParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayRealParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayRealParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayRealParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayRealParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayRealParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayRealParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayRealParameterSpecification::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayRealParameterSpecification, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayRealParameterSpecification =
	_CAPEOPEN_1_2_ICapeArrayRealParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getLowerBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			lBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub getUpperBound: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			uBound: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeInteger,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayInteger,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable"][::std::mem::size_of::<
		CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable,
	>() - 72usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable>()
			- 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable,
		base
	)
		- 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable::getDefaultValue"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable , getDefaultValue) - 32usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable::getLowerBound"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable , getLowerBound) - 40usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable::getUpperBound"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable , getUpperBound) - 48usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable::ValidateElement"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable , ValidateElement) - 56usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable,
		Validate
	)
		- 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification::me"][::std::mem::offset_of!(
		_CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification,
		me
	) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification::vTbl"][::std::mem::offset_of!(
		_CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification,
		vTbl
	) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification =
	_CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut ICapeString,
		) -> CapeResult,
	>,
	pub getOptionList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			optionNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getRestrictedToList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			restricted: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: *mut ICapeString,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayString,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable"][::std::mem::size_of::<
		CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable,
	>() - 72usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable"][::std::mem::align_of::<
		CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable,
	>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable,
		base
	)
		- 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable::getDefaultValue"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable , getDefaultValue) - 32usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable::getOptionList"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable , getOptionList) - 40usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable::getRestrictedToList"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable , getRestrictedToList) - 48usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable::ValidateElement"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable , ValidateElement) - 56usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable,
		Validate
	)
		- 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayStringParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayStringParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayStringParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayStringParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayStringParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayStringParameterSpecification::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeArrayStringParameterSpecification, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayStringParameterSpecification::vTbl"][::std::mem::offset_of!(
		_CAPEOPEN_1_2_ICapeArrayStringParameterSpecification,
		vTbl
	) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayStringParameterSpecification =
	_CAPEOPEN_1_2_ICapeArrayStringParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable {
	pub base: ICapeInterface_VTable,
	pub getDefaultValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			defaultValue: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub ValidateElement: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			position: *mut ICapeArrayInteger,
			value: CapeBoolean,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			value: *mut ICapeArrayBoolean,
			message: *mut ICapeString,
			isOK: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable"][::std::mem::size_of::<
		CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable,
	>() - 56usize];
	["Alignment of CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable>()
			- 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable,
		base
	)
		- 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable::getDefaultValue"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable , getDefaultValue) - 32usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable::ValidateElement"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable , ValidateElement) - 40usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable,
		Validate
	)
		- 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification::me"][::std::mem::offset_of!(
		_CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification,
		me
	) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification::vTbl"][::std::mem::offset_of!(
		_CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification,
		vTbl
	) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification =
	_CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeSimulationContext_VTable {
	pub base: ICapeInterface_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeSimulationContext_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeSimulationContext_VTable>() - 32usize];
	["Alignment of CAPEOPEN_1_2_ICapeSimulationContext_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeSimulationContext_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeSimulationContext_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeSimulationContext_VTable, base) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeSimulationContext {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeSimulationContext_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeSimulationContext"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeSimulationContext>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeSimulationContext"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeSimulationContext>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeSimulationContext::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeSimulationContext, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeSimulationContext::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeSimulationContext, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeSimulationContext = _CAPEOPEN_1_2_ICapeSimulationContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeUtilities_VTable {
	pub base: ICapeInterface_VTable,
	pub getParameters: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			parameters: *mut *mut _CAPEOPEN_1_2_ICapeCollection,
		) -> CapeResult,
	>,
	pub putSimulationContext: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			context: *mut _CAPEOPEN_1_2_ICapeSimulationContext,
		) -> CapeResult,
	>,
	pub Initialize:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub Terminate:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub Edit: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			parent: CapeWindowId,
			result: *mut CAPEOPEN_1_2_CapeEditResult,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeUtilities_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeUtilities_VTable>() - 72usize];
	["Alignment of CAPEOPEN_1_2_ICapeUtilities_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeUtilities_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUtilities_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUtilities_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUtilities_VTable::getParameters"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUtilities_VTable, getParameters) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUtilities_VTable::putSimulationContext"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeUtilities_VTable,
		putSimulationContext
	) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUtilities_VTable::Initialize"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUtilities_VTable, Initialize) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUtilities_VTable::Terminate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUtilities_VTable, Terminate) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUtilities_VTable::Edit"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUtilities_VTable, Edit) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeUtilities {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeUtilities_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeUtilities"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeUtilities>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeUtilities"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeUtilities>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeUtilities::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeUtilities, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeUtilities::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeUtilities, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeUtilities = _CAPEOPEN_1_2_ICapeUtilities;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeDiagnostic_VTable {
	pub base: ICapeInterface_VTable,
	pub PopUpMessage: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			message: *mut ICapeString,
		) -> CapeResult,
	>,
	pub LogMessage: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			message: *mut ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeDiagnostic_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeDiagnostic_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeDiagnostic_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeDiagnostic_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeDiagnostic_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeDiagnostic_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeDiagnostic_VTable::PopUpMessage"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeDiagnostic_VTable, PopUpMessage) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeDiagnostic_VTable::LogMessage"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeDiagnostic_VTable, LogMessage) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeDiagnostic {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeDiagnostic_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeDiagnostic"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeDiagnostic>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeDiagnostic"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeDiagnostic>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeDiagnostic::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeDiagnostic, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeDiagnostic::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeDiagnostic, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeDiagnostic = _CAPEOPEN_1_2_ICapeDiagnostic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeMaterialManager_VTable {
	pub base: ICapeInterface_VTable,
	pub getMaterialList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			materialNameList: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub CreateMaterial: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			materialName: *mut ICapeString,
			material: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeMaterialManager_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeMaterialManager_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeMaterialManager_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeMaterialManager_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeMaterialManager_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeMaterialManager_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeMaterialManager_VTable::getMaterialList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeMaterialManager_VTable,
		getMaterialList
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeMaterialManager_VTable::CreateMaterial"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeMaterialManager_VTable,
		CreateMaterial
	) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeMaterialManager {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeMaterialManager_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeMaterialManager"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeMaterialManager>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeMaterialManager"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeMaterialManager>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeMaterialManager::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeMaterialManager, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeMaterialManager::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeMaterialManager, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeMaterialManager = _CAPEOPEN_1_2_ICapeMaterialManager;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeCOSEUtilities_VTable {
	pub base: ICapeInterface_VTable,
	pub getNamedValueList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			namedValues: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub NamedValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			namedValue: *mut ICapeValue,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeCOSEUtilities_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeCOSEUtilities_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeCOSEUtilities_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeCOSEUtilities_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCOSEUtilities_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeCOSEUtilities_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCOSEUtilities_VTable::getNamedValueList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeCOSEUtilities_VTable,
		getNamedValueList
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCOSEUtilities_VTable::NamedValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeCOSEUtilities_VTable, NamedValue) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeCOSEUtilities {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeCOSEUtilities_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeCOSEUtilities"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeCOSEUtilities>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeCOSEUtilities"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeCOSEUtilities>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeCOSEUtilities::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeCOSEUtilities, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeCOSEUtilities::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeCOSEUtilities, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeCOSEUtilities = _CAPEOPEN_1_2_ICapeCOSEUtilities;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoMaterial_VTable {
	pub base: ICapeInterface_VTable,
	pub ClearAllProps:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub CopyFromMaterial: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			source: *mut _CAPEOPEN_1_2_ICapeThermoMaterial,
		) -> CapeResult,
	>,
	pub CreateMaterial: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			materialObject: *mut *mut _CAPEOPEN_1_2_ICapeThermoMaterial,
		) -> CapeResult,
	>,
	pub GetOverallProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			basis: *mut ICapeString,
			results: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub GetOverallTPFraction: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			temperature: *mut CapeReal,
			pressure: *mut CapeReal,
			composition: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub GetPresentPhases: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			phaseLabels: *mut ICapeArrayString,
			phaseStatus: *mut ICapeArrayEnumeration,
		) -> CapeResult,
	>,
	pub GetSinglePhaseProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			phaseLabel: *mut ICapeString,
			basis: *mut ICapeString,
			results: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub GetTPFraction: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			phaseLabel: *mut ICapeString,
			temperature: *mut CapeReal,
			pressure: *mut CapeReal,
			composition: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub GetTwoPhaseProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			phaseLabels: *mut ICapeArrayString,
			basis: *mut ICapeString,
			results: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub SetOverallProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			basis: *mut ICapeString,
			values: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub SetPresentPhases: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			phaseLabels: *mut ICapeArrayString,
			phaseStatus: *mut ICapeArrayEnumeration,
		) -> CapeResult,
	>,
	pub SetSinglePhaseProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			phaseLabel: *mut ICapeString,
			basis: *mut ICapeString,
			values: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub SetTwoPhaseProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			phaseLabels: *mut ICapeArrayString,
			basis: *mut ICapeString,
			values: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoMaterial_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoMaterial_VTable>() - 136usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoMaterial_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoMaterial_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoMaterial_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::ClearAllProps"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoMaterial_VTable, ClearAllProps) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::CopyFromMaterial"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		CopyFromMaterial
	) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::CreateMaterial"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoMaterial_VTable, CreateMaterial) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::GetOverallProp"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoMaterial_VTable, GetOverallProp) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::GetOverallTPFraction"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		GetOverallTPFraction
	) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::GetPresentPhases"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		GetPresentPhases
	) - 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::GetSinglePhaseProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		GetSinglePhaseProp
	) - 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::GetTPFraction"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoMaterial_VTable, GetTPFraction) - 88usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::GetTwoPhaseProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		GetTwoPhaseProp
	) - 96usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::SetOverallProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		SetOverallProp
	) - 104usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::SetPresentPhases"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		SetPresentPhases
	) - 112usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::SetSinglePhaseProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		SetSinglePhaseProp
	) - 120usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterial_VTable::SetTwoPhaseProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
		SetTwoPhaseProp
	) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoMaterial {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoMaterial_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoMaterial"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoMaterial>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoMaterial"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoMaterial>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoMaterial::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoMaterial, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoMaterial::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoMaterial, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoMaterial = _CAPEOPEN_1_2_ICapeThermoMaterial;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable {
	pub base: ICapeInterface_VTable,
	pub SetMaterial: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			material: *mut _CAPEOPEN_1_2_ICapeThermoMaterial,
		) -> CapeResult,
	>,
	pub UnsetMaterial:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable::SetMaterial"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable,
		SetMaterial
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable::UnsetMaterial"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable,
		UnsetMaterial
	) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoMaterialContext {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoMaterialContext_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoMaterialContext"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoMaterialContext>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoMaterialContext"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoMaterialContext>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoMaterialContext::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoMaterialContext, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoMaterialContext::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoMaterialContext, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoMaterialContext = _CAPEOPEN_1_2_ICapeThermoMaterialContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoCompounds_VTable {
	pub base: ICapeInterface_VTable,
	pub GetCompoundConstant: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
			compIds: *mut ICapeArrayString,
			containsMissingValues: *mut CapeBoolean,
			propVals: *mut ICapeArrayValue,
		) -> CapeResult,
	>,
	pub GetCompoundList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			compIds: *mut ICapeArrayString,
			formulae: *mut ICapeArrayString,
			names: *mut ICapeArrayString,
			boilTemps: *mut ICapeArrayReal,
			molwts: *mut ICapeArrayReal,
			casnos: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getConstPropList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getNumCompounds: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, num: *mut CapeInteger) -> CapeResult,
	>,
	pub GetPDependentProperty: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
			pressure: CapeReal,
			compIds: *mut ICapeArrayString,
			containsMissingValues: *mut CapeBoolean,
			propVals: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub getPDependentPropList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub GetTDependentProperty: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
			temperature: CapeReal,
			compIds: *mut ICapeArrayString,
			containsMissingValues: *mut CapeBoolean,
			propVals: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub getTDependentPropList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoCompounds_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoCompounds_VTable>() - 96usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoCompounds_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoCompounds_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoCompounds_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::GetCompoundConstant"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		GetCompoundConstant
	) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::GetCompoundList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		GetCompoundList
	) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::getConstPropList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		getConstPropList
	) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::getNumCompounds"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		getNumCompounds
	) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::GetPDependentProperty"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		GetPDependentProperty
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::getPDependentPropList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		getPDependentPropList
	)
		- 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::GetTDependentProperty"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		GetTDependentProperty
	)
		- 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoCompounds_VTable::getTDependentPropList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
		getTDependentPropList
	)
		- 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoCompounds {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoCompounds_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoCompounds"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoCompounds>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoCompounds"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoCompounds>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoCompounds::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoCompounds, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoCompounds::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoCompounds, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoCompounds = _CAPEOPEN_1_2_ICapeThermoCompounds;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoPhases_VTable {
	pub base: ICapeInterface_VTable,
	pub getNumPhases: ::std::option::Option<
		unsafe extern "C" fn(me: *mut ::std::os::raw::c_void, num: *mut CapeInteger) -> CapeResult,
	>,
	pub GetPhaseInfo: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			phaseLabel: *mut ICapeString,
			phaseAttribute: *mut ICapeString,
			value: *mut ICapeValue,
		) -> CapeResult,
	>,
	pub GetPhaseList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			phaseLabels: *mut ICapeArrayString,
			stateOfAggregation: *mut ICapeArrayString,
			keyCompoundId: *mut ICapeArrayString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoPhases_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoPhases_VTable>() - 56usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoPhases_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoPhases_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPhases_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoPhases_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPhases_VTable::getNumPhases"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoPhases_VTable, getNumPhases) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPhases_VTable::GetPhaseInfo"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoPhases_VTable, GetPhaseInfo) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPhases_VTable::GetPhaseList"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoPhases_VTable, GetPhaseList) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoPhases {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoPhases_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoPhases"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoPhases>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoPhases"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoPhases>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPhases::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPhases, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPhases::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPhases, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoPhases = _CAPEOPEN_1_2_ICapeThermoPhases;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable {
	pub base: ICapeInterface_VTable,
	pub CalcAndGetLnPhi: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			phaseLabel: *mut ICapeString,
			temperature: CapeReal,
			pressure: CapeReal,
			moleFraction: *mut ICapeArrayReal,
			fFlags: CapeInteger,
			lnPhi: *mut ICapeArrayReal,
			lnPhiDT: *mut ICapeArrayReal,
			lnPhiDP: *mut ICapeArrayReal,
			lnPhiDn: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub CalcSinglePhaseProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
			phaseLabel: *mut ICapeString,
		) -> CapeResult,
	>,
	pub CalcTwoPhaseProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
			phaseLabels: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub CheckSinglePhasePropSpec: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			phaseLabel: *mut ICapeString,
			valid: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub CheckTwoPhasePropSpec: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			property: *mut ICapeString,
			phaseLabels: *mut ICapeArrayString,
			valid: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub getSinglePhasePropList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub getTwoPhasePropList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			props: *mut ICapeArrayString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable>() - 88usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::CalcAndGetLnPhi"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
		CalcAndGetLnPhi
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::CalcSinglePhaseProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
		CalcSinglePhaseProp
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::CalcTwoPhaseProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
		CalcTwoPhaseProp
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::CheckSinglePhasePropSpec"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
		CheckSinglePhasePropSpec
	)
		- 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::CheckTwoPhasePropSpec"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
		CheckTwoPhasePropSpec
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::getSinglePhasePropList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
		getSinglePhasePropList
	)
		- 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable::getTwoPhasePropList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
		getTwoPhasePropList
	)
		- 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoPropertyRoutine {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoPropertyRoutine_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoPropertyRoutine"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoPropertyRoutine>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoPropertyRoutine"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoPropertyRoutine>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPropertyRoutine::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPropertyRoutine, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPropertyRoutine::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPropertyRoutine, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoPropertyRoutine = _CAPEOPEN_1_2_ICapeThermoPropertyRoutine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable {
	pub base: ICapeInterface_VTable,
	pub CalcEquilibrium: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			specification1: *mut ICapeArrayString,
			specification2: *mut ICapeArrayString,
			solutionType: *mut ICapeString,
		) -> CapeResult,
	>,
	pub CheckEquilibriumSpec: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			specification1: *mut ICapeArrayString,
			specification2: *mut ICapeArrayString,
			solutionType: *mut ICapeString,
			isSupported: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable::CalcEquilibrium"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable,
		CalcEquilibrium
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable::CheckEquilibriumSpec"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable,
		CheckEquilibriumSpec
	)
		- 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine = _CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable {
	pub base: ICapeInterface_VTable,
	pub GetUniversalConstant: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			constantId: *mut ICapeString,
			constantValue: *mut ICapeValue,
		) -> CapeResult,
	>,
	pub getUniversalConstantList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			constantIdList: *mut ICapeArrayString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable::GetUniversalConstant"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable,
		GetUniversalConstant
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable::getUniversalConstantList"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable , getUniversalConstantList) - 40usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoUniversalConstant {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoUniversalConstant_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoUniversalConstant"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoUniversalConstant>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoUniversalConstant"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoUniversalConstant>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoUniversalConstant::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoUniversalConstant, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoUniversalConstant::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoUniversalConstant, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoUniversalConstant = _CAPEOPEN_1_2_ICapeThermoUniversalConstant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable {
	pub base: ICapeInterface_VTable,
	pub getPropertyPackageList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			PackageNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub GetPropertyPackage: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			PackageName: *mut ICapeString,
			package: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable>() - 48usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable::getPropertyPackageList"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable , getPropertyPackageList) - 32usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable::GetPropertyPackage"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable , GetPropertyPackage) - 40usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoPropertyPackageManager {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoPropertyPackageManager"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoPropertyPackageManager>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoPropertyPackageManager"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoPropertyPackageManager>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPropertyPackageManager::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPropertyPackageManager, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPropertyPackageManager::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPropertyPackageManager, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoPropertyPackageManager =
	_CAPEOPEN_1_2_ICapeThermoPropertyPackageManager;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeUnitPort_VTable {
	pub base: ICapeInterface_VTable,
	pub getPortType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			portType: *mut CAPEOPEN_1_2_CapePortType,
		) -> CapeResult,
	>,
	pub getDirection: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			portDirection: *mut CAPEOPEN_1_2_CapePortDirection,
		) -> CapeResult,
	>,
	pub getConnectedObject: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			connectedObject: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub Connect: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			objectToConnect: *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub Disconnect:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeUnitPort_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeUnitPort_VTable>() - 72usize];
	["Alignment of CAPEOPEN_1_2_ICapeUnitPort_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeUnitPort_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnitPort_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnitPort_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnitPort_VTable::getPortType"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnitPort_VTable, getPortType) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnitPort_VTable::getDirection"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnitPort_VTable, getDirection) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnitPort_VTable::getConnectedObject"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnitPort_VTable, getConnectedObject) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnitPort_VTable::Connect"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnitPort_VTable, Connect) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnitPort_VTable::Disconnect"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnitPort_VTable, Disconnect) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeUnitPort {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeUnitPort_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeUnitPort"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeUnitPort>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeUnitPort"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeUnitPort>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeUnitPort::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeUnitPort, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeUnitPort::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeUnitPort, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeUnitPort = _CAPEOPEN_1_2_ICapeUnitPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeUnit_VTable {
	pub base: ICapeInterface_VTable,
	pub ports: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			ports: *mut *mut _CAPEOPEN_1_2_ICapeCollection,
		) -> CapeResult,
	>,
	pub getValStatus: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			ValStatus: *mut CAPEOPEN_1_2_CapeValidationStatus,
		) -> CapeResult,
	>,
	pub Calculate:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			message: *mut ICapeString,
			isValid: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeUnit_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeUnit_VTable>() - 64usize];
	["Alignment of CAPEOPEN_1_2_ICapeUnit_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeUnit_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnit_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnit_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnit_VTable::ports"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnit_VTable, ports) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnit_VTable::getValStatus"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnit_VTable, getValStatus) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnit_VTable::Calculate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnit_VTable, Calculate) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeUnit_VTable::Validate"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeUnit_VTable, Validate) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeUnit {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeUnit_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeUnit"][::std::mem::size_of::<_CAPEOPEN_1_2_ICapeUnit>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeUnit"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeUnit>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeUnit::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeUnit, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeUnit::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeUnit, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeUnit = _CAPEOPEN_1_2_ICapeUnit;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapePersistWriter_VTable {
	pub base: ICapeInterface_VTable,
	pub AddReal: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: CapeReal,
		) -> CapeResult,
	>,
	pub AddInteger: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: CapeInteger,
		) -> CapeResult,
	>,
	pub AddBoolean: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: CapeBoolean,
		) -> CapeResult,
	>,
	pub AddString: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub AddEnumeration: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: CapeEnumeration,
		) -> CapeResult,
	>,
	pub AddValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeValue,
		) -> CapeResult,
	>,
	pub AddArrayReal: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub AddArrayInteger: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayInteger,
		) -> CapeResult,
	>,
	pub AddArrayBoolean: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayBoolean,
		) -> CapeResult,
	>,
	pub AddArrayString: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub AddArrayEnumeration: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayEnumeration,
		) -> CapeResult,
	>,
	pub AddArrayValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayValue,
		) -> CapeResult,
	>,
	pub AddArrayByte: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayByte,
		) -> CapeResult,
	>,
	pub AddNode: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			nodeName: *mut ICapeString,
			value: *mut *mut _CAPEOPEN_1_2_ICapePersistWriter,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapePersistWriter_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapePersistWriter_VTable>() - 144usize];
	["Alignment of CAPEOPEN_1_2_ICapePersistWriter_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapePersistWriter_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddReal"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddReal) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddInteger"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddInteger) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddBoolean"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddBoolean) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddString"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddString) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddEnumeration"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddEnumeration) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddValue) - 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddArrayReal"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddArrayReal) - 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddArrayInteger"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddArrayInteger) - 88usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddArrayBoolean"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddArrayBoolean) - 96usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddArrayString"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddArrayString) - 104usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddArrayEnumeration"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapePersistWriter_VTable,
		AddArrayEnumeration
	) - 112usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddArrayValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddArrayValue) - 120usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddArrayByte"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddArrayByte) - 128usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistWriter_VTable::AddNode"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistWriter_VTable, AddNode) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapePersistWriter {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapePersistWriter_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapePersistWriter"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapePersistWriter>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapePersistWriter"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapePersistWriter>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapePersistWriter::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapePersistWriter, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapePersistWriter::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapePersistWriter, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapePersistWriter = _CAPEOPEN_1_2_ICapePersistWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapePersistReader_VTable {
	pub base: ICapeInterface_VTable,
	pub getValueNames: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub GetValueType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			valueType: *mut CAPEOPEN_1_2_CapePersistedDataType,
		) -> CapeResult,
	>,
	pub GetReal: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut CapeReal,
		) -> CapeResult,
	>,
	pub GetInteger: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut CapeInteger,
		) -> CapeResult,
	>,
	pub GetBoolean: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub GetString: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeString,
		) -> CapeResult,
	>,
	pub GetEnumeration: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut CapeEnumeration,
		) -> CapeResult,
	>,
	pub GetValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeValue,
		) -> CapeResult,
	>,
	pub GetArrayReal: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub GetArrayInteger: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayInteger,
		) -> CapeResult,
	>,
	pub GetArrayBoolean: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayBoolean,
		) -> CapeResult,
	>,
	pub GetArrayString: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub GetArrayEnumeration: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayEnumeration,
		) -> CapeResult,
	>,
	pub GetArrayValue: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayValue,
		) -> CapeResult,
	>,
	pub GetArrayByte: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			valueName: *mut ICapeString,
			value: *mut ICapeArrayByte,
		) -> CapeResult,
	>,
	pub getNodeNames: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			nodeNames: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub GetNode: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			nodeName: *mut ICapeString,
			value: *mut *mut _CAPEOPEN_1_2_ICapePersistReader,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapePersistReader_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapePersistReader_VTable>() - 168usize];
	["Alignment of CAPEOPEN_1_2_ICapePersistReader_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapePersistReader_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::getValueNames"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, getValueNames) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetValueType"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetValueType) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetReal"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetReal) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetInteger"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetInteger) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetBoolean"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetBoolean) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetString"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetString) - 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetEnumeration"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetEnumeration) - 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetValue) - 88usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetArrayReal"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetArrayReal) - 96usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetArrayInteger"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapePersistReader_VTable,
		GetArrayInteger
	) - 104usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetArrayBoolean"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapePersistReader_VTable,
		GetArrayBoolean
	) - 112usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetArrayString"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetArrayString) - 120usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetArrayEnumeration"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapePersistReader_VTable,
		GetArrayEnumeration
	) - 128usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetArrayValue"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetArrayValue) - 136usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetArrayByte"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetArrayByte) - 144usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::getNodeNames"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, getNodeNames) - 152usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersistReader_VTable::GetNode"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersistReader_VTable, GetNode) - 160usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapePersistReader {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapePersistReader_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapePersistReader"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapePersistReader>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapePersistReader"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapePersistReader>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapePersistReader::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapePersistReader, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapePersistReader::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapePersistReader, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapePersistReader = _CAPEOPEN_1_2_ICapePersistReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapePersist_VTable {
	pub base: ICapeInterface_VTable,
	pub Save: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			writer: *mut _CAPEOPEN_1_2_ICapePersistWriter,
			clearDirty: CapeBoolean,
		) -> CapeResult,
	>,
	pub Load: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			reader: *mut _CAPEOPEN_1_2_ICapePersistReader,
		) -> CapeResult,
	>,
	pub getIsDirty: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			dirty: *mut CapeBoolean,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapePersist_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapePersist_VTable>() - 56usize];
	["Alignment of CAPEOPEN_1_2_ICapePersist_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapePersist_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersist_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersist_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersist_VTable::Save"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersist_VTable, Save) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersist_VTable::Load"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersist_VTable, Load) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapePersist_VTable::getIsDirty"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapePersist_VTable, getIsDirty) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapePersist {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapePersist_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapePersist"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapePersist>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapePersist"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapePersist>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapePersist::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapePersist, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapePersist::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapePersist, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapePersist = _CAPEOPEN_1_2_ICapePersist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeReport_VTable {
	pub base: ICapeInterface_VTable,
	pub getReportNames: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			names: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub ReportTypes: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			types: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub ReportLocales: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			type_: *mut ICapeString,
			locales: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub CheckReportSpec: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			type_: *mut ICapeString,
			locale: *mut ICapeString,
			reportAvailable: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub GenerateReport: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			type_: *mut ICapeString,
			locale: *mut ICapeString,
			reportContent: *mut ICapeString,
		) -> CapeResult,
	>,
	pub GenerateReportFile: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			name: *mut ICapeString,
			type_: *mut ICapeString,
			locale: *mut ICapeString,
			fileName: *mut ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeReport_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeReport_VTable>() - 80usize];
	["Alignment of CAPEOPEN_1_2_ICapeReport_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeReport_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeReport_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeReport_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeReport_VTable::getReportNames"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeReport_VTable, getReportNames) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeReport_VTable::ReportTypes"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeReport_VTable, ReportTypes) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeReport_VTable::ReportLocales"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeReport_VTable, ReportLocales) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeReport_VTable::CheckReportSpec"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeReport_VTable, CheckReportSpec) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeReport_VTable::GenerateReport"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeReport_VTable, GenerateReport) - 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeReport_VTable::GenerateReportFile"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeReport_VTable, GenerateReportFile) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeReport {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeReport_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeReport"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeReport>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeReport"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeReport>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeReport::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeReport, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeReport::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeReport, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeReport = _CAPEOPEN_1_2_ICapeReport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable {
	pub base: ICapeInterface_VTable,
	pub Monitor:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
	pub Validate: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			message: *mut ICapeString,
			isValid: *mut CapeBoolean,
		) -> CapeResult,
	>,
	pub getValStatus: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			validationStatus: *mut CAPEOPEN_1_2_CapeValidationStatus,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable>() - 56usize];
	["Alignment of CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable::Monitor"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable,
		Monitor
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable::Validate"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable,
		Validate
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable::getValStatus"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable,
		getValStatus
	)
		- 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent =
	_CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeStream_VTable {
	pub base: ICapeInterface_VTable,
	pub StreamType: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			StreamType: *mut CAPEOPEN_1_2_CapeStreamType,
		) -> CapeResult,
	>,
	pub getStreamObject: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			streamObject: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub GetUpstreamPortConnection: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			upstreamPort: *mut ICapeString,
			upstreamUnit: *mut ICapeString,
		) -> CapeResult,
	>,
	pub GetDownstreamPortConnection: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			downstreamPort: *mut ICapeString,
			downstreamUnit: *mut ICapeString,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeStream_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeStream_VTable>() - 64usize];
	["Alignment of CAPEOPEN_1_2_ICapeStream_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeStream_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStream_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStream_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStream_VTable::StreamType"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStream_VTable, StreamType) - 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStream_VTable::getStreamObject"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeStream_VTable, getStreamObject) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStream_VTable::GetUpstreamPortConnection"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStream_VTable,
		GetUpstreamPortConnection
	) - 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeStream_VTable::GetDownstreamPortConnection"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeStream_VTable,
		GetDownstreamPortConnection
	) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeStream {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeStream_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeStream"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeStream>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeStream"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeStream>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeStream::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeStream, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeStream::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeStream, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeStream = _CAPEOPEN_1_2_ICapeStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable {
	pub base: ICapeInterface_VTable,
	pub UnitOperationAdded: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			unit: *mut _CAPEOPEN_1_2_ICapeUnit,
		) -> CapeResult,
	>,
	pub UnitOperationRemoved: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			unit: *mut _CAPEOPEN_1_2_ICapeUnit,
		) -> CapeResult,
	>,
	pub UnitOperationRenamed: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			unit: *mut _CAPEOPEN_1_2_ICapeUnit,
			oldName: *mut ICapeString,
		) -> CapeResult,
	>,
	pub StreamAdded: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			stream: *mut _CAPEOPEN_1_2_ICapeStream,
			type_: CAPEOPEN_1_2_CapeStreamType,
		) -> CapeResult,
	>,
	pub StreamRemoved: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			stream: *mut _CAPEOPEN_1_2_ICapeStream,
			type_: CAPEOPEN_1_2_CapeStreamType,
		) -> CapeResult,
	>,
	pub StreamRenamed: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			stream: *mut _CAPEOPEN_1_2_ICapeStream,
			type_: CAPEOPEN_1_2_CapeStreamType,
			oldName: *mut ICapeString,
		) -> CapeResult,
	>,
	pub ConnectionChanged: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			stream: *mut _CAPEOPEN_1_2_ICapeStream,
			type_: CAPEOPEN_1_2_CapeStreamType,
			port: *mut _CAPEOPEN_1_2_ICapeUnitPort,
			unit: *mut _CAPEOPEN_1_2_ICapeUnit,
		) -> CapeResult,
	>,
	pub FlowsheetSolutionStatusChanged: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			solutionStatus: CAPEOPEN_1_2_CapeSolutionStatus,
		) -> CapeResult,
	>,
	pub FlowsheetValidationStateChanged: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			validationStatus: CAPEOPEN_1_2_CapeValidationStatus,
		) -> CapeResult,
	>,
	pub NextTimeStep:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable>() - 112usize];
	["Alignment of CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::base"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable,
		base
	) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::UnitOperationAdded"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable , UnitOperationAdded) - 32usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::UnitOperationRemoved"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable , UnitOperationRemoved) - 40usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::UnitOperationRenamed"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable , UnitOperationRenamed) - 48usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::StreamAdded"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable,
		StreamAdded
	)
		- 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::StreamRemoved"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable,
		StreamRemoved
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::StreamRenamed"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable,
		StreamRenamed
	)
		- 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::ConnectionChanged"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable,
		ConnectionChanged
	)
		- 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::FlowsheetSolutionStatusChanged"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable , FlowsheetSolutionStatusChanged) - 88usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::FlowsheetValidationStateChanged"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable , FlowsheetValidationStateChanged) - 96usize] ;
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable::NextTimeStep"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable,
		NextTimeStep
	)
		- 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink =
	_CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable {
	pub base: ICapeInterface_VTable,
	pub GetStreamCollection: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			type_: CAPEOPEN_1_2_CapeStreamType,
			streamCollection: *mut *mut _CAPEOPEN_1_2_ICapeCollection,
		) -> CapeResult,
	>,
	pub GetUnitOperationCollection: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			UnitOperationCollection: *mut *mut _CAPEOPEN_1_2_ICapeCollection,
		) -> CapeResult,
	>,
	pub getSolutionStatus: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			solutionStatus: *mut CAPEOPEN_1_2_CapeSolutionStatus,
		) -> CapeResult,
	>,
	pub getValStatus: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			validationStatus: *mut CAPEOPEN_1_2_CapeValidationStatus,
		) -> CapeResult,
	>,
	pub RegisterForEvents: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			component: *mut ICapeInterface,
			events: *mut ICapeArrayEnumeration,
		) -> CapeResult,
	>,
	pub getSupportedEvents: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			SupportedEvents: *mut ICapeArrayEnumeration,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable>() - 80usize];
	["Alignment of CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable::GetStreamCollection"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable,
		GetStreamCollection
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable::GetUnitOperationCollection"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable,
		GetUnitOperationCollection
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable::getSolutionStatus"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable,
		getSolutionStatus
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable::getValStatus"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable,
		getValStatus
	) - 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable::RegisterForEvents"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable,
		RegisterForEvents
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable::getSupportedEvents"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable,
		getSupportedEvents
	)
		- 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeFlowsheetMonitoring {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeFlowsheetMonitoring_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeFlowsheetMonitoring"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeFlowsheetMonitoring>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeFlowsheetMonitoring"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeFlowsheetMonitoring>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeFlowsheetMonitoring::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeFlowsheetMonitoring, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeFlowsheetMonitoring::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeFlowsheetMonitoring, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeFlowsheetMonitoring = _CAPEOPEN_1_2_ICapeFlowsheetMonitoring;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable {
	pub base: ICapeInterface_VTable,
	pub GetCustomDataContainer: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			source: *mut ICapeInterface,
			customDataContainer: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable>() - 40usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable::GetCustomDataContainer"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable , GetCustomDataContainer) - 32usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoMaterialCustomData {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoMaterialCustomData_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoMaterialCustomData"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoMaterialCustomData>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoMaterialCustomData"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoMaterialCustomData>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoMaterialCustomData::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoMaterialCustomData, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoMaterialCustomData::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoMaterialCustomData, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoMaterialCustomData = _CAPEOPEN_1_2_ICapeThermoMaterialCustomData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeCustomDataSource_VTable {
	pub base: ICapeInterface_VTable,
	pub CreateCustomDataContainer: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			customDataContainer: *mut *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub CopyCustomData: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			source: *mut ICapeInterface,
			target: *mut ICapeInterface,
		) -> CapeResult,
	>,
	pub ThermodynamicConfigurationChanged: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			container: *mut ICapeInterface,
		) -> CapeResult,
	>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeCustomDataSource_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeCustomDataSource_VTable>() - 56usize];
	["Alignment of CAPEOPEN_1_2_ICapeCustomDataSource_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeCustomDataSource_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCustomDataSource_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeCustomDataSource_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCustomDataSource_VTable::CreateCustomDataContainer"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeCustomDataSource_VTable,
		CreateCustomDataContainer
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCustomDataSource_VTable::CopyCustomData"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeCustomDataSource_VTable,
		CopyCustomData
	) - 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeCustomDataSource_VTable::ThermodynamicConfigurationChanged"] [:: std :: mem :: offset_of ! (CAPEOPEN_1_2_ICapeCustomDataSource_VTable , ThermodynamicConfigurationChanged) - 48usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeCustomDataSource {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeCustomDataSource_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeCustomDataSource"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeCustomDataSource>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeCustomDataSource"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeCustomDataSource>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeCustomDataSource::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeCustomDataSource, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeCustomDataSource::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeCustomDataSource, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeCustomDataSource = _CAPEOPEN_1_2_ICapeCustomDataSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable {
	pub base: ICapeInterface_VTable,
	pub SetPetroCompoundProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			propertyID: *mut ICapeString,
			basis: *mut ICapeString,
			values: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub SetPetroBulkProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			propertyID: *mut ICapeString,
			basis: *mut ICapeString,
			value: CapeReal,
		) -> CapeResult,
	>,
	pub GetPetroCompoundProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			propertyID: *mut ICapeString,
			basis: *mut ICapeString,
			values: *mut ICapeArrayReal,
		) -> CapeResult,
	>,
	pub GetPetroBulkProp: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			propertyID: *mut ICapeString,
			basis: *mut ICapeString,
			value: *mut CapeReal,
		) -> CapeResult,
	>,
	pub PetroPropList: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			propertyIDs: *mut ICapeArrayString,
		) -> CapeResult,
	>,
	pub GetPetroPropAttribute: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			propertyID: *mut ICapeString,
			attributeName: *mut ICapeString,
			attributeValue: *mut ICapeValue,
		) -> CapeResult,
	>,
	pub CopyPetroProperties: ::std::option::Option<
		unsafe extern "C" fn(
			me: *mut ::std::os::raw::c_void,
			source: *mut _CAPEOPEN_1_2_ICapeThermoMaterial,
		) -> CapeResult,
	>,
	pub UpdatePetroProperties:
		::std::option::Option<unsafe extern "C" fn(me: *mut ::std::os::raw::c_void) -> CapeResult>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable"]
		[::std::mem::size_of::<CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable>() - 96usize];
	["Alignment of CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable"]
		[::std::mem::align_of::<CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable>() - 8usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::base"]
		[::std::mem::offset_of!(CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable, base) - 0usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::SetPetroCompoundProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		SetPetroCompoundProp
	)
		- 32usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::SetPetroBulkProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		SetPetroBulkProp
	)
		- 40usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::GetPetroCompoundProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		GetPetroCompoundProp
	)
		- 48usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::GetPetroBulkProp"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		GetPetroBulkProp
	)
		- 56usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::PetroPropList"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		PetroPropList
	)
		- 64usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::GetPetroPropAttribute"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		GetPetroPropAttribute
	)
		- 72usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::CopyPetroProperties"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		CopyPetroProperties
	)
		- 80usize];
	["Offset of field: CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable::UpdatePetroProperties"][::std::mem::offset_of!(
		CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
		UpdatePetroProperties
	)
		- 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CAPEOPEN_1_2_ICapeThermoPetroleumFractions {
	pub me: *mut ::std::os::raw::c_void,
	pub vTbl: *mut CAPEOPEN_1_2_ICapeThermoPetroleumFractions_VTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _CAPEOPEN_1_2_ICapeThermoPetroleumFractions"]
		[::std::mem::size_of::<_CAPEOPEN_1_2_ICapeThermoPetroleumFractions>() - 16usize];
	["Alignment of _CAPEOPEN_1_2_ICapeThermoPetroleumFractions"]
		[::std::mem::align_of::<_CAPEOPEN_1_2_ICapeThermoPetroleumFractions>() - 8usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPetroleumFractions::me"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPetroleumFractions, me) - 0usize];
	["Offset of field: _CAPEOPEN_1_2_ICapeThermoPetroleumFractions::vTbl"]
		[::std::mem::offset_of!(_CAPEOPEN_1_2_ICapeThermoPetroleumFractions, vTbl) - 8usize];
};
pub type CAPEOPEN_1_2_ICapeThermoPetroleumFractions = _CAPEOPEN_1_2_ICapeThermoPetroleumFractions;
unsafe extern "C" {
	pub static libraryId_CAPEOPEN_1_2: CapeUUID;
}
unsafe extern "C" {
	pub static categoryId_CAPEOPEN_1_2_Component_1_2: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeIdentification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeCollection_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeRealParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeIntegerParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeStringParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeBooleanParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayRealParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayIntegerParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayStringParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayBooleanParameter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeRealParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeIntegerParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeStringParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeBooleanParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayRealParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayIntegerParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayStringParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeArrayBooleanParameterSpecification_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeSimulationContext_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeUtilities_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeDiagnostic_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeMaterialManager_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeCOSEUtilities_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoMaterial_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoMaterialContext_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoCompounds_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoPhases_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoPropertyRoutine_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoEquilibriumRoutine_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoUniversalConstant_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoPropertyPackageManager_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeUnitPort_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeUnit_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapePersistWriter_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapePersistReader_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapePersist_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeReport_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeFlowsheetMonitoringComponent_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeStream_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeFlowsheetMonitoringEventSink_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeFlowsheetMonitoring_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoMaterialCustomData_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeCustomDataSource_UUID: CapeUUID;
}
unsafe extern "C" {
	pub static CAPEOPEN_1_2_ICapeThermoPetroleumFractions_UUID: CapeUUID;
}
